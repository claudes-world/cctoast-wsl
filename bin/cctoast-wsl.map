{
  "version": 3,
  "sources": ["../node_modules/picocolors/picocolors.js", "../src/cli.ts", "../src/dependencies.ts"],
  "sourcesContent": ["let p = process || {}, argv = p.argv || [], env = p.env || {}\nlet isColorSupported =\n\t!(!!env.NO_COLOR || argv.includes(\"--no-color\")) &&\n\t(!!env.FORCE_COLOR || argv.includes(\"--color\") || p.platform === \"win32\" || ((p.stdout || {}).isTTY && env.TERM !== \"dumb\") || !!env.CI)\n\nlet formatter = (open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input, index = string.indexOf(close, open.length)\n\t\treturn ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\", cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet f = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: f(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: f(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: f(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: f(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: f(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: f(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: f(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: f(\"\\x1b[9m\", \"\\x1b[29m\"),\n\n\t\tblack: f(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: f(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: f(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: f(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: f(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: f(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: f(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: f(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\n\t\tbgBlack: f(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: f(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: f(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: f(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: f(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: f(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: f(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: f(\"\\x1b[47m\", \"\\x1b[49m\"),\n\n\t\tblackBright: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tredBright: f(\"\\x1b[91m\", \"\\x1b[39m\"),\n\t\tgreenBright: f(\"\\x1b[92m\", \"\\x1b[39m\"),\n\t\tyellowBright: f(\"\\x1b[93m\", \"\\x1b[39m\"),\n\t\tblueBright: f(\"\\x1b[94m\", \"\\x1b[39m\"),\n\t\tmagentaBright: f(\"\\x1b[95m\", \"\\x1b[39m\"),\n\t\tcyanBright: f(\"\\x1b[96m\", \"\\x1b[39m\"),\n\t\twhiteBright: f(\"\\x1b[97m\", \"\\x1b[39m\"),\n\n\t\tbgBlackBright: f(\"\\x1b[100m\", \"\\x1b[49m\"),\n\t\tbgRedBright: f(\"\\x1b[101m\", \"\\x1b[49m\"),\n\t\tbgGreenBright: f(\"\\x1b[102m\", \"\\x1b[49m\"),\n\t\tbgYellowBright: f(\"\\x1b[103m\", \"\\x1b[49m\"),\n\t\tbgBlueBright: f(\"\\x1b[104m\", \"\\x1b[49m\"),\n\t\tbgMagentaBright: f(\"\\x1b[105m\", \"\\x1b[49m\"),\n\t\tbgCyanBright: f(\"\\x1b[106m\", \"\\x1b[49m\"),\n\t\tbgWhiteBright: f(\"\\x1b[107m\", \"\\x1b[49m\"),\n\t}\n}\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n", "/**\n * cctoast-wsl CLI Entry Point\n *\n * Secure, zero-admin utility for Windows toast notifications from WSL\n * via Claude Code hooks using PowerShell BurntToast module.\n */\n\nimport { Command } from 'commander';\nimport process from 'node:process';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n// import {\n//   intro as p.intro,\n//   outro as p.outro,\n//   select as p.select,\n//   multiselect as p.multiselect,\n//   confirm as p.confirm,\n//   isCancel as p.isCancel,\n//   cancel as p.cancel,\n//   log as p.log,\n//   spinner as p.spinner,\n//   tasks as p.tasks,\n//   group as p.group,\n// } from '@clack/prompts';\nimport * as p from '@clack/prompts';\nimport color from 'picocolors';\n\nimport { DependencyChecker, BurntToastAutoInstaller } from './dependencies.js';\nimport { log } from 'node:console';\n\n// Get package.json for version info\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\nconst packagePath = join(__dirname, '..', 'package.json');\nconst packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));\n\ninterface CliOptions {\n  global: boolean;\n  local: boolean;\n  notification: boolean;\n  stop: boolean;\n  sync: boolean;\n  printInstructions: boolean;\n  json: boolean;\n  dryRun: boolean;\n  force: boolean;\n  quiet: boolean;\n  uninstall: boolean;\n}\n\ninterface InstallationResult {\n  action: 'install' | 'uninstall';\n  scope: 'global' | 'local';\n  hooks: {\n    notification: boolean;\n    stop: boolean;\n  };\n  settings: {\n    sync: boolean;\n    dryRun: boolean;\n    force: boolean;\n    quiet: boolean;\n  };\n}\n\n/**\n * Exit codes per PRD specification\n */\nexport const ExitCodes = {\n  SUCCESS: 0,\n  USER_ABORT: 1,\n  DEPENDENCY_FAILURE: 2,\n  IO_ERROR: 3,\n} as const;\n\n/**\n * Initialize CLI with all flags from PRD Section 4\n */\nfunction initializeCLI(): Command {\n  const program = new Command();\n\n  program\n    .name('cctoast-wsl')\n    .description(\n      'Secure, zero-admin utility for Windows toast notifications from WSL via Claude Code hooks'\n    )\n    .version(packageJson.version, '-v, --version', 'Display version number');\n\n  // Installation scope flags (mutually exclusive)\n  program\n    .option('-g, --global', 'Install for user to ~/.claude/... (default)')\n    .option('-l, --local', 'Install for project to .claude/...')\n    .addHelpText(\n      'after',\n      '\\nScope Options:\\n  Only one of --global or --local can be specified'\n    );\n\n  // Hook configuration flags\n  program\n    .option('--notification', 'Include Notification hook (default)', true)\n    .option('--no-notification', 'Exclude Notification hook')\n    .option('--stop', 'Include Stop hook (default)', true)\n    .option('--no-stop', 'Exclude Stop hook');\n\n  // Installation behavior flags\n  program.option(\n    '--sync',\n    'When local, modify tracked settings.json instead of settings.local.json (not recommended for teams due to Windows-only nature of hooks)',\n    false\n  );\n\n  // Output and behavior flags\n  program\n    .option('-p, --print-instructions', 'Show usage instructions and exit')\n    .option('--json', 'Machine-readable JSON output', false)\n    .option('-n, --dry-run', 'Preview changes without writing files')\n    .option(\n      '-f, --force',\n      'Bypass failed dependency checks (except BurntToast)'\n    )\n    .option('-q, --quiet', 'Suppress interactive prompts for CI environments');\n\n  // Uninstall flag\n  program.option('--uninstall', 'Remove cctoast-wsl installation');\n\n  return program;\n}\n\n/**\n * Validate mutually exclusive flags\n */\nfunction validateFlags(options: CliOptions): void {\n  // Handle default values first\n  if (!options.global && !options.local) {\n    options.global = true; // Default to global if neither specified\n  }\n\n  // Global and local are mutually exclusive (but only if both are explicitly set)\n  if (options.global && options.local) {\n    console.error('Error: --global and --local flags cannot be used together');\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // At least one hook must be enabled\n  if (!options.notification && !options.stop) {\n    console.error(\n      'Error: At least one hook (--notification or --stop) must be enabled'\n    );\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // Sync only makes sense with local install\n  if (options.sync && !options.local) {\n    console.error('Warning: --sync flag only applies to local installations');\n  }\n}\n\n/**\n * Handle print instructions flag\n */\nfunction handlePrintInstructions(): void {\n  console.log(`\ncctoast-wsl v${packageJson.version} - Usage Instructions\n\nINSTALLATION:\n  npx @claude/cctoast-wsl                    # Global install with defaults\n  npx @claude/cctoast-wsl --local           # Local project install\n  npx @claude/cctoast-wsl --dry-run         # Preview changes\n\nEXAMPLES:\n  npx @claude/cctoast-wsl --global --notification --stop\n  npx @claude/cctoast-wsl --local --sync --no-stop\n  npx @claude/cctoast-wsl --uninstall --global\n\nHOOK USAGE:\n  After installation, Claude Code will automatically trigger toast notifications:\n  - Notification hook: Shows when Claude is waiting for input\n  - Stop hook: Shows when Claude completes a task\n\nMANUAL TESTING:\n  ~/.claude/cctoast-wsl/show-toast.sh --notification-hook\n  ~/.claude/cctoast-wsl/show-toast.sh --stop-hook\n\nFor complete documentation: https://github.com/claudes-world/cctoast-wsl\n`);\n  process.exit(ExitCodes.SUCCESS);\n}\n\n/**\n * Format output based on --json flag\n */\nfunction formatOutput(data: InstallationResult, useJson: boolean): void {\n  if (useJson) {\n    console.log(JSON.stringify(data, null, 2));\n  } else {\n    // Human-readable output will be implemented in installation logic\n    console.log('Installation completed successfully');\n  }\n}\n\n/**\n * Check if we're in an interactive terminal\n */\nfunction isInteractive(): boolean {\n  return process.stdin.isTTY && process.stdout.isTTY;\n}\n\n/**\n * Handle cancellation in clack prompts\n */\nfunction handleCancel(): void {\n  p.cancel('Operation cancelled by user');\n  process.exit(ExitCodes.USER_ABORT);\n}\n\n/**\n * Interactive prompt flow: scope \u2192 hooks \u2192 sync \u2192 confirm\n */\nasync function runInteractiveMode(): Promise<CliOptions> {\n  p.intro('\uD83C\uDF5E cctoast-wsl Installation');\n\n  // Step 1: Scope selection\n  const scope = await p.select({\n    message: 'Choose installation scope:',\n    options: [\n      {\n        value: 'global',\n        label: 'Global',\n        hint: '\u2605 Recommended - Install to ~/.claude/',\n      },\n      {\n        value: 'local',\n        label: 'Local',\n        hint: 'Install to current project .claude/',\n      },\n    ],\n  });\n\n  if (p.isCancel(scope)) {\n    handleCancel();\n  }\n  const scopeValue = scope as string;\n\n  // Step 2: Hook selection\n  const hooks = await p.multiselect({\n    message: 'Select hooks to enable:',\n    options: [\n      {\n        value: 'notification',\n        label: 'Notification hook',\n        hint: 'Shows toast when Claude is waiting for input',\n      },\n      {\n        value: 'stop',\n        label: 'Stop hook',\n        hint: 'Shows toast when Claude completes a task',\n      },\n    ],\n    initialValues: ['notification', 'stop'],\n    required: true,\n  });\n\n  if (p.isCancel(hooks)) {\n    handleCancel();\n  }\n\n  // Step 3: Sync option (only for local installs)\n  let sync = false;\n  if (scopeValue === 'local') {\n    const syncResult = await p.confirm({\n      message: 'Modify tracked settings.json instead of settings.local.json?',\n      initialValue: false,\n    });\n\n    if (p.isCancel(syncResult)) {\n      handleCancel();\n    }\n    sync = syncResult as boolean;\n  }\n\n  // Step 4: Final confirmation\n  const hooksList = hooks as string[];\n  const summary = [\n    `Scope: ${scopeValue}`,\n    `Hooks: ${hooksList.join(', ')}`,\n    ...(scopeValue === 'local' ? [`Sync: ${sync ? 'yes' : 'no'}`] : []),\n  ];\n\n  p.log.info(\n    `Configuration summary:\\n${summary.map(item => `  \u2022 ${item}`).join('\\n')}`\n  );\n\n  // Add descriptive explanation based on config\n  let configExplanation = '';\n  if (scopeValue === 'global') {\n    configExplanation =\n      `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your global settings at ~/.claude/settings.json.\\n` +\n      'The cctoast-wsl tool will install the necessary scripts and configuration for Windows toast notifications, available to all WSL sessions for your user.';\n  } else if (scopeValue === 'local') {\n    if (sync) {\n      configExplanation =\n        `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your project's tracked settings at ./.claude/settings.json.\\n` +\n        'This will update the main project settings (recommended only if your team is Windows-only).';\n    } else {\n      configExplanation =\n        `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your local-only settings at ./.claude/settings.local.json.\\n` +\n        'This keeps Windows-specific configuration out of version control, ideal for cross-platform teams.';\n    }\n    configExplanation +=\n      '\\nThe cctoast-wsl tool will install the necessary scripts and configuration for toast notifications in this project.';\n  }\n  // TODO: After pre-flight checks, improve this message to be more precise, descriptive, and better formatted/worded.\n  // Consider including actual file paths, resolved hook actions, and a summary of what will happen next.\n  if (configExplanation) {\n    p.log.message(configExplanation);\n  }\n\n  const proceed = await p.confirm({\n    message: 'Proceed with installation?',\n    initialValue: true,\n  });\n\n  if (p.isCancel(proceed) || !proceed) {\n    handleCancel();\n  }\n\n  p.outro('Ready to install! \uD83C\uDF89');\n\n  return {\n    global: scopeValue === 'global',\n    local: scopeValue === 'local',\n    notification: hooksList.includes('notification'),\n    stop: hooksList.includes('stop'),\n    sync,\n    printInstructions: false,\n    json: false,\n    dryRun: false,\n    force: false,\n    quiet: false,\n    uninstall: false,\n  };\n}\n\n/**\n * Handle process signals gracefully\n */\nfunction setupSignalHandlers(): void {\n  process.on('SIGINT', () => {\n    p.cancel('\\nOperation cancelled by user');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n\n  process.on('SIGTERM', () => {\n    p.cancel('\\nOperation terminated');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n}\n\n/**\n * Run dependency checks with user-friendly output\n */\n// async function runDependencyChecks(options: CliOptions): Promise<void> {\n//   const s = p.spinner();\n//   s.start('Checking system dependencies...');\n//   if (!options.quiet) {\n//     console.log('\uD83D\uDD0D Checking system dependencies...\\n');\n//   }\n\n//   const checker = new DependencyChecker(options.force);\n//   const results = await checker.checkAll();\n  \n//   // Separate fatal and non-fatal failures\n//   const fatalFailures = results.filter(r => !r.passed && r.fatal);\n//   const warnings = results.filter(r => !r.passed && !r.fatal);\n//   const passed = results.filter(r => r.passed);\n\n//   // Display results\n//   if (!options.quiet) {\n//     // Show passed checks\n//     passed.forEach(result => {\n//       p.log.message(`${result.message}`, { symbol: color.cyan('\u2714') });\n\n//     });\n\n//     // Show warnings\n//     warnings.forEach(result => {\n//       console.log(`\u26A0\uFE0F  ${result.message}`);\n//       if (result.remedy) {\n//         console.log(`   \uD83D\uDCA1 ${result.remedy}`);\n//       }\n//     });\n//   }\n\n//   // Handle fatal failures\n//   if (fatalFailures.length > 0) {\n//     if (!options.quiet) {\n//       console.log('\\n\u274C Fatal dependency checks failed:\\n');\n\n//       fatalFailures.forEach(result => {\n//         console.log(`   \u2022 ${result.message}`);\n//         if (result.remedy) {\n//           console.log(`     Fix: ${result.remedy}`);\n//         }\n//       });\n//     }\n\n//     // Special handling for BurntToast - offer auto-install\n//     const burntToastFailure = fatalFailures.find(\n//       r => r.name === 'burnttoast-module'\n//     );\n//     if (burntToastFailure && !options.quiet) {\n//       const autoInstaller = new BurntToastAutoInstaller();\n\n//       try {\n//         console.log('\\n\uD83E\uDD16 Auto-installation available for BurntToast module');\n//         const consent = await p.confirm({\n//           message:\n//             'Would you like to automatically install BurntToast PowerShell module?',\n//           initialValue: true,\n//         });\n\n//         if (p.isCancel(consent)) {\n//           handleCancel();\n//         }\n\n//         if (consent) {\n//           await autoInstaller.install();\n\n//           // Verify installation\n//           if (await autoInstaller.verify()) {\n//             console.log(\n//               '\u2705 BurntToast module installed and verified successfully'\n//             );\n\n//             // Remove BurntToast from fatal failures\n//             const remainingFailures = fatalFailures.filter(\n//               r => r.name !== 'burnttoast-module'\n//             );\n//             if (remainingFailures.length === 0) {\n//               console.log('\\n\uD83C\uDF89 All dependency checks now pass!');\n//               return;\n//             }\n//           } else {\n//             console.log('\u274C BurntToast installation verification failed');\n//           }\n//         }\n//       } catch (error) {\n//         console.log(\n//           `\u274C Auto-installation failed: ${error instanceof Error ? error.message : error}`\n//         );\n//       }\n//     }\n\n//     if (\n//       !options.force ||\n//       fatalFailures.some(r => r.name === 'burnttoast-module')\n//     ) {\n//       console.log(\n//         '\\n\uD83D\uDCA1 Use --force to bypass non-fatal checks, but BurntToast is required'\n//       );\n//       process.exit(ExitCodes.DEPENDENCY_FAILURE);\n//     }\n//   }\n\n//   if (!options.quiet && warnings.length === 0 && fatalFailures.length === 0) {\n//     console.log('\\n\uD83C\uDF89 All dependency checks passed!');\n//   }\n//   s.stop();\n// }\nimport { stream } from '@clack/prompts';\n\nasync function runDependencyChecks(options: CliOptions): Promise<void> {\n  const checker = new DependencyChecker(options.force);\n\n  const checkStream = (async function*() {\n    yield color.cyan('\u23F3 Starting dependency checks...');\n    const results = await checker.checkAll();\n\n    for (const r of results) {\n      if (r.passed) {\n        yield color.green(`\u2714 ${r.message}`);\n      } else if (r.fatal) {\n        yield color.red(`\u2716 ${r.message}`);\n      } else {\n        yield color.yellow(`\u26A0\uFE0F  ${r.message}`);\n      }\n    }\n\n    yield color.cyan('\u2705 All dependency checks complete!');\n  })();\n\n  stream.info(checkStream);\n}\n\n/**\n * Check if any CLI flags were explicitly provided (excluding defaults)\n */\nfunction hasExplicitFlags(argv: string[]): boolean {\n  const flagsToCheck = [\n    '--global',\n    '-g',\n    '--local',\n    '-l',\n    '--no-notification',\n    '--no-stop',\n    '--sync',\n    '--json',\n    '--dry-run',\n    '-n',\n    '--force',\n    '-f',\n    '--quiet',\n    '-q',\n    '--uninstall',\n  ];\n  return flagsToCheck.some(flag => argv.includes(flag));\n}\n\n/**\n * Main CLI execution function\n */\nasync function main(): Promise<void> {\n  try {\n    setupSignalHandlers();\n\n    const program = initializeCLI();\n\n    // Parse command line arguments\n    program.parse();\n    let options = program.opts() as CliOptions;\n\n    // Handle print instructions immediately\n    if (options.printInstructions) {\n      handlePrintInstructions();\n      return;\n    }\n\n    // Determine if we should use interactive mode\n    const shouldUseInteractive =\n      !options.quiet && isInteractive() && !hasExplicitFlags(process.argv);\n\n    if (shouldUseInteractive) {\n      // Use interactive mode\n      options = await runInteractiveMode();\n    } else {\n      // Use command line flags - validate them\n      validateFlags(options);\n    }\n\n    // Run dependency checks (Milestone 3)\n    if (options.json) {\n      // For JSON output, run checks silently and include in output\n      const checker = new DependencyChecker(options.force);\n      const depResults = await checker.checkAll();\n\n      const result = {\n        action: options.uninstall ? 'uninstall' : 'install',\n        scope: options.local ? 'local' : 'global',\n        hooks: {\n          notification: options.notification,\n          stop: options.stop,\n        },\n        settings: {\n          sync: options.sync,\n          dryRun: options.dryRun,\n          force: options.force,\n          quiet: options.quiet,\n        },\n        dependencies: {\n          timestamp: new Date().toISOString(),\n          results: depResults.map(r => ({\n            name: r.name,\n            passed: r.passed,\n            fatal: r.fatal,\n            message: r.message,\n            remedy: r.remedy,\n          })),\n          summary: {\n            total: depResults.length,\n            passed: depResults.filter(r => r.passed).length,\n            failed: depResults.filter(r => !r.passed).length,\n            fatal: depResults.filter(r => !r.passed && r.fatal).length,\n            warnings: depResults.filter(r => !r.passed && !r.fatal).length,\n          },\n        },\n      };\n\n      console.log(JSON.stringify(result, null, 2));\n\n      // Exit with appropriate code if dependencies failed\n      const fatalFailures = depResults.filter(r => !r.passed && r.fatal);\n      if (fatalFailures.length > 0 && !options.force) {\n        process.exit(ExitCodes.DEPENDENCY_FAILURE);\n      }\n    } else {\n      // Run dependency checks with user interaction\n      await runDependencyChecks(options);\n    }\n\n    if (options.dryRun && !options.json) {\n      console.log('\\n\uD83D\uDCCB DRY RUN MODE - No files will be modified');\n    }\n\n    // TODO: Implement actual installation/uninstallation logic in later milestones\n    if (!options.json && !shouldUseInteractive) {\n      const result: InstallationResult = {\n        action: options.uninstall ? 'uninstall' : 'install',\n        scope: options.local ? 'local' : 'global',\n        hooks: {\n          notification: options.notification,\n          stop: options.stop,\n        },\n        settings: {\n          sync: options.sync,\n          dryRun: options.dryRun,\n          force: options.force,\n          quiet: options.quiet,\n        },\n      };\n\n      formatOutput(result, false);\n      console.log(\n        '\\n\uD83C\uDF89 Dependency Management System implemented successfully!'\n      );\n      console.log('\uD83D\uDCCB Installation logic will be added in Milestone 4');\n    }\n  } catch (error) {\n    console.error(\n      'Unexpected error:',\n      error instanceof Error ? error.message : error\n    );\n    process.exit(ExitCodes.IO_ERROR);\n  }\n}\n\n// Run CLI if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(ExitCodes.IO_ERROR);\n  });\n}\n\nexport { main, initializeCLI, validateFlags };\n", "/**\n * Dependency Management System\n *\n * Verifies WSL environment, PowerShell access, and BurntToast availability.\n * Implements 24-hour caching and BurntToast auto-installation.\n */\n\nimport { exec } from 'node:child_process';\nimport { promisify } from 'node:util';\nimport { readFile, writeFile, mkdir } from 'node:fs/promises';\nimport { existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { homedir } from 'node:os';\n\nconst execAsync = promisify(exec);\n\nexport interface CheckResult {\n  name: string;\n  passed: boolean;\n  fatal: boolean;\n  message?: string;\n  remedy?: string;\n  timestamp: number;\n}\n\nexport interface CacheData {\n  [checkName: string]: CheckResult;\n}\n\nexport interface BurntToastInstaller {\n  isInstalled(): Promise<boolean>;\n  promptInstall(): Promise<boolean>;\n  install(): Promise<void>;\n  verify(): Promise<boolean>;\n}\n\nexport class DependencyChecker {\n  private readonly cacheDir = join(homedir(), '.cache', 'cctoast-wsl');\n  private readonly cacheFile = join(this.cacheDir, 'checks.json');\n  private readonly cacheTimeoutMs = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor(private readonly _forceRefresh = false) {}\n\n  /**\n   * Check all dependencies with caching\n   */\n  async checkAll(): Promise<CheckResult[]> {\n    const checks = [\n      () => this.checkWSLEnvironment(),\n      () => this.checkPowerShellAccess(),\n      () => this.checkBurntToast(),\n      () => this.checkJqBinary(),\n      () => this.checkClaudeDirectory(),\n    ];\n\n    const results: CheckResult[] = [];\n\n    for (const check of checks) {\n      try {\n        const result = await this.runWithCache(check);\n        results.push(result);\n      } catch (error) {\n        // Create error result for failed checks\n        const errorResult: CheckResult = {\n          name: 'unknown',\n          passed: false,\n          fatal: true,\n          message: `Check failed: ${error instanceof Error ? error.message : error}`,\n          timestamp: Date.now(),\n        };\n        results.push(errorResult);\n      }\n    }\n\n    // Save results to cache\n    await this.saveCache(results);\n\n    return results;\n  }\n\n  /**\n   * Check WSL environment (fatal)\n   */\n  async checkWSLEnvironment(): Promise<CheckResult> {\n    const name = 'wsl-environment';\n\n    try {\n      // Check /proc/version for WSL markers\n      const procVersion = await readFile('/proc/version', 'utf8');\n      const isWSL1 = procVersion.includes('Microsoft');\n      const isWSL2 =\n        procVersion.includes('WSL2') ||\n        procVersion.includes('microsoft-standard');\n\n      if (isWSL1 || isWSL2) {\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: `Detected ${isWSL2 ? 'WSL2' : 'WSL1'} environment`,\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'Not running in WSL environment',\n          remedy: 'Run inside Windows Subsystem for Linux (WSL)',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'Unable to detect WSL environment',\n        remedy: 'Ensure you are running inside WSL',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check PowerShell.exe accessibility (fatal)\n   */\n  async checkPowerShellAccess(): Promise<CheckResult> {\n    const name = 'powershell-exe';\n\n    try {\n      // Check if powershell.exe is in PATH with timeout\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Write-Output test\"',\n        {\n          timeout: 5000,\n        }\n      );\n\n      if (stdout.trim() === 'test') {\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: 'PowerShell.exe accessible and functional',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'PowerShell.exe not responding correctly',\n          remedy:\n            'Add Windows PowerShell to PATH or check WSL interop settings',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'PowerShell.exe not accessible from PATH',\n        remedy:\n          'Add Windows PowerShell to PATH: export PATH=\"$PATH:/mnt/c/Windows/System32/WindowsPowerShell/v1.0\"',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check BurntToast module (fatal, but auto-installable)\n   */\n  async checkBurntToast(): Promise<CheckResult> {\n    const name = 'burnttoast-module';\n\n    try {\n      // Check if BurntToast module is available\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-Module -ListAvailable -Name BurntToast | Select-Object Version\"',\n        { timeout: 10000 }\n      );\n\n      if (stdout.trim() && !stdout.includes('No modules')) {\n        // Extract version if available\n        const versionMatch = stdout.match(/(\\d+\\.\\d+\\.\\d+)/);\n        const version = versionMatch ? versionMatch[1] : 'unknown';\n\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: `BurntToast module installed (version ${version})`,\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'BurntToast PowerShell module not installed',\n          remedy: 'Install-Module BurntToast -Scope CurrentUser -Force',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'Unable to check BurntToast module availability',\n        remedy:\n          'Check PowerShell execution policy and install: Install-Module BurntToast -Scope CurrentUser -Force',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check PowerShell execution policy (warning only)\n   */\n  async checkExecutionPolicy(): Promise<CheckResult> {\n    const name = 'execution-policy';\n\n    try {\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-ExecutionPolicy\"',\n        { timeout: 5000 }\n      );\n\n      const policy = stdout.trim();\n      const restrictivePolicies = ['Restricted', 'AllSigned'];\n\n      if (restrictivePolicies.includes(policy)) {\n        return {\n          name,\n          passed: false,\n          fatal: false,\n          message: `PowerShell execution policy is restrictive: ${policy}`,\n          remedy: 'Set-ExecutionPolicy -Scope CurrentUser RemoteSigned',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: true,\n          fatal: false,\n          message: `PowerShell execution policy: ${policy}`,\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'Unable to check PowerShell execution policy',\n        remedy:\n          'Check PowerShell access and consider setting: Set-ExecutionPolicy -Scope CurrentUser RemoteSigned',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check jq binary availability (optional)\n   */\n  async checkJqBinary(): Promise<CheckResult> {\n    const name = 'jq-binary';\n\n    try {\n      await execAsync('command -v jq', { timeout: 2000 });\n\n      return {\n        name,\n        passed: true,\n        fatal: false,\n        message: 'jq binary available',\n        timestamp: Date.now(),\n      };\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'jq binary not found',\n        remedy:\n          'Install jq: sudo apt-get install jq (Ubuntu/Debian) or brew install jq (macOS)',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check Claude directory exists (warning only)\n   */\n  async checkClaudeDirectory(): Promise<CheckResult> {\n    const name = 'claude-directory';\n    const globalClaudeDir = join(homedir(), '.claude');\n\n    try {\n      if (existsSync(globalClaudeDir)) {\n        return {\n          name,\n          passed: true,\n          fatal: false,\n          message: 'Claude directory exists',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: false,\n          message: 'Claude directory not found',\n          remedy:\n            'Install Claude Code first, or hooks will not function until Claude is installed',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'Unable to check Claude directory',\n        remedy: 'Ensure Claude Code is properly installed',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Run a check function with caching support\n   */\n  private async runWithCache(\n    checkFn: () => Promise<CheckResult>\n  ): Promise<CheckResult> {\n    if (!this._forceRefresh) {\n      const cachedResult = await this.getCachedResult(checkFn.name);\n      if (cachedResult && this.isCacheValid(cachedResult)) {\n        return cachedResult;\n      }\n    }\n\n    return await checkFn();\n  }\n\n  /**\n   * Get cached result for a specific check\n   */\n  private async getCachedResult(\n    checkName: string\n  ): Promise<CheckResult | null> {\n    try {\n      if (!existsSync(this.cacheFile)) {\n        return null;\n      }\n\n      const cacheData: CacheData = JSON.parse(\n        await readFile(this.cacheFile, 'utf8')\n      );\n      return cacheData[checkName] || null;\n    } catch {\n      // Cache corrupted or unreadable - ignore and perform fresh check\n      return null;\n    }\n  }\n\n  /**\n   * Check if cached result is still valid (within 24h)\n   */\n  private isCacheValid(result: CheckResult): boolean {\n    const age = Date.now() - result.timestamp;\n    return age < this.cacheTimeoutMs;\n  }\n\n  /**\n   * Save check results to cache\n   */\n  private async saveCache(results: CheckResult[]): Promise<void> {\n    try {\n      // Ensure cache directory exists\n      await mkdir(this.cacheDir, { recursive: true });\n\n      // Load existing cache data\n      let cacheData: CacheData = {};\n      if (existsSync(this.cacheFile)) {\n        try {\n          cacheData = JSON.parse(await readFile(this.cacheFile, 'utf8'));\n        } catch {\n          // Corrupted cache, start fresh\n          cacheData = {};\n        }\n      }\n\n      // Update cache with new results\n      for (const result of results) {\n        cacheData[result.name] = result;\n      }\n\n      // Write updated cache atomically\n      const tempFile = `${this.cacheFile}.tmp`;\n      await writeFile(tempFile, JSON.stringify(cacheData, null, 2));\n\n      // Atomic rename (works on most POSIX systems)\n      await execAsync(`mv \"${tempFile}\" \"${this.cacheFile}\"`);\n    } catch (error) {\n      // Cache save failed - not critical, continue without caching\n      console.warn('Failed to save dependency check cache:', error);\n    }\n  }\n}\n\n/**\n * BurntToast Auto-Installer Implementation\n */\nexport class BurntToastAutoInstaller implements BurntToastInstaller {\n  async isInstalled(): Promise<boolean> {\n    try {\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-Module -ListAvailable -Name BurntToast\"',\n        { timeout: 10000 }\n      );\n      return stdout.trim().length > 0 && !stdout.includes('No modules');\n    } catch {\n      return false;\n    }\n  }\n\n  async promptInstall(): Promise<boolean> {\n    // This will be called from CLI with user prompts\n    // For now, just return true to indicate consent\n    return true;\n  }\n\n  async install(): Promise<void> {\n    try {\n      console.log('Installing BurntToast PowerShell module...');\n\n      const { stderr } = await execAsync(\n        'powershell.exe -Command \"Install-Module BurntToast -Scope CurrentUser -Force -AllowClobber\"',\n        { timeout: 60000 } // Allow up to 60 seconds for installation\n      );\n\n      if (stderr && !stderr.includes('WARNING')) {\n        throw new Error(`Installation failed: ${stderr}`);\n      }\n\n      console.log('BurntToast module installed successfully');\n    } catch (error) {\n      throw new Error(\n        `Failed to install BurntToast: ${error instanceof Error ? error.message : error}`\n      );\n    }\n  }\n\n  async verify(): Promise<boolean> {\n    try {\n      // Verify installation by attempting to import the module\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Import-Module BurntToast -ErrorAction Stop; Write-Output success\"',\n        { timeout: 10000 }\n      );\n\n      return stdout.trim() === 'success';\n    } catch {\n      return false;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["p", "process", "join", "join", "process", "color"]
}
