{
  "version": 3,
  "sources": ["../../node_modules/picocolors/picocolors.js", "../src/cli.ts", "../src/dependencies.ts", "../src/jsonc-parser.ts", "../src/settings-merger.ts", "../src/installer.ts"],
  "sourcesContent": ["let p = process || {}, argv = p.argv || [], env = p.env || {}\nlet isColorSupported =\n\t!(!!env.NO_COLOR || argv.includes(\"--no-color\")) &&\n\t(!!env.FORCE_COLOR || argv.includes(\"--color\") || p.platform === \"win32\" || ((p.stdout || {}).isTTY && env.TERM !== \"dumb\") || !!env.CI)\n\nlet formatter = (open, close, replace = open) =>\n\tinput => {\n\t\tlet string = \"\" + input, index = string.indexOf(close, open.length)\n\t\treturn ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close\n\t}\n\nlet replaceClose = (string, close, replace, index) => {\n\tlet result = \"\", cursor = 0\n\tdo {\n\t\tresult += string.substring(cursor, index) + replace\n\t\tcursor = index + close.length\n\t\tindex = string.indexOf(close, cursor)\n\t} while (~index)\n\treturn result + string.substring(cursor)\n}\n\nlet createColors = (enabled = isColorSupported) => {\n\tlet f = enabled ? formatter : () => String\n\treturn {\n\t\tisColorSupported: enabled,\n\t\treset: f(\"\\x1b[0m\", \"\\x1b[0m\"),\n\t\tbold: f(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\"),\n\t\tdim: f(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\"),\n\t\titalic: f(\"\\x1b[3m\", \"\\x1b[23m\"),\n\t\tunderline: f(\"\\x1b[4m\", \"\\x1b[24m\"),\n\t\tinverse: f(\"\\x1b[7m\", \"\\x1b[27m\"),\n\t\thidden: f(\"\\x1b[8m\", \"\\x1b[28m\"),\n\t\tstrikethrough: f(\"\\x1b[9m\", \"\\x1b[29m\"),\n\n\t\tblack: f(\"\\x1b[30m\", \"\\x1b[39m\"),\n\t\tred: f(\"\\x1b[31m\", \"\\x1b[39m\"),\n\t\tgreen: f(\"\\x1b[32m\", \"\\x1b[39m\"),\n\t\tyellow: f(\"\\x1b[33m\", \"\\x1b[39m\"),\n\t\tblue: f(\"\\x1b[34m\", \"\\x1b[39m\"),\n\t\tmagenta: f(\"\\x1b[35m\", \"\\x1b[39m\"),\n\t\tcyan: f(\"\\x1b[36m\", \"\\x1b[39m\"),\n\t\twhite: f(\"\\x1b[37m\", \"\\x1b[39m\"),\n\t\tgray: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\n\t\tbgBlack: f(\"\\x1b[40m\", \"\\x1b[49m\"),\n\t\tbgRed: f(\"\\x1b[41m\", \"\\x1b[49m\"),\n\t\tbgGreen: f(\"\\x1b[42m\", \"\\x1b[49m\"),\n\t\tbgYellow: f(\"\\x1b[43m\", \"\\x1b[49m\"),\n\t\tbgBlue: f(\"\\x1b[44m\", \"\\x1b[49m\"),\n\t\tbgMagenta: f(\"\\x1b[45m\", \"\\x1b[49m\"),\n\t\tbgCyan: f(\"\\x1b[46m\", \"\\x1b[49m\"),\n\t\tbgWhite: f(\"\\x1b[47m\", \"\\x1b[49m\"),\n\n\t\tblackBright: f(\"\\x1b[90m\", \"\\x1b[39m\"),\n\t\tredBright: f(\"\\x1b[91m\", \"\\x1b[39m\"),\n\t\tgreenBright: f(\"\\x1b[92m\", \"\\x1b[39m\"),\n\t\tyellowBright: f(\"\\x1b[93m\", \"\\x1b[39m\"),\n\t\tblueBright: f(\"\\x1b[94m\", \"\\x1b[39m\"),\n\t\tmagentaBright: f(\"\\x1b[95m\", \"\\x1b[39m\"),\n\t\tcyanBright: f(\"\\x1b[96m\", \"\\x1b[39m\"),\n\t\twhiteBright: f(\"\\x1b[97m\", \"\\x1b[39m\"),\n\n\t\tbgBlackBright: f(\"\\x1b[100m\", \"\\x1b[49m\"),\n\t\tbgRedBright: f(\"\\x1b[101m\", \"\\x1b[49m\"),\n\t\tbgGreenBright: f(\"\\x1b[102m\", \"\\x1b[49m\"),\n\t\tbgYellowBright: f(\"\\x1b[103m\", \"\\x1b[49m\"),\n\t\tbgBlueBright: f(\"\\x1b[104m\", \"\\x1b[49m\"),\n\t\tbgMagentaBright: f(\"\\x1b[105m\", \"\\x1b[49m\"),\n\t\tbgCyanBright: f(\"\\x1b[106m\", \"\\x1b[49m\"),\n\t\tbgWhiteBright: f(\"\\x1b[107m\", \"\\x1b[49m\"),\n\t}\n}\n\nmodule.exports = createColors()\nmodule.exports.createColors = createColors\n", "/**\n * cctoast-wsl CLI Entry Point\n *\n * Secure, zero-admin utility for Windows toast notifications from WSL\n * via Claude Code hooks using PowerShell BurntToast module.\n */\n\nimport { Command } from 'commander';\nimport process from 'node:process';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n// import {\n//   intro as p.intro,\n//   outro as p.outro,\n//   select as p.select,\n//   multiselect as p.multiselect,\n//   confirm as p.confirm,\n//   isCancel as p.isCancel,\n//   cancel as p.cancel,\n//   log as p.log,\n//   spinner as p.spinner,\n//   tasks as p.tasks,\n//   group as p.group,\n// } from '@clack/prompts';\nimport * as p from '@clack/prompts';\nimport color from 'picocolors';\n\nimport { DependencyChecker, BurntToastAutoInstaller } from './dependencies.js';\n\nimport { Installer } from './installer.js';\n\n\n// Get package.json for version info\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\nconst packagePath = join(__dirname, '..', 'package.json');\nconst packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));\n\ninterface CliOptions {\n  global: boolean;\n  local: boolean;\n  notification: boolean;\n  stop: boolean;\n  sync: boolean;\n  printInstructions: boolean;\n  json: boolean;\n  dryRun: boolean;\n  force: boolean;\n  quiet: boolean;\n  uninstall: boolean;\n}\n\ninterface InstallationResult {\n  action: 'install' | 'uninstall';\n  scope: 'global' | 'local';\n  hooks: {\n    notification: boolean;\n    stop: boolean;\n  };\n  settings: {\n    sync: boolean;\n    dryRun: boolean;\n    force: boolean;\n    quiet: boolean;\n  };\n}\n\n/**\n * Exit codes per PRD specification\n */\nexport const ExitCodes = {\n  SUCCESS: 0,\n  USER_ABORT: 1,\n  DEPENDENCY_FAILURE: 2,\n  IO_ERROR: 3,\n} as const;\n\n/**\n * Initialize CLI with all flags from PRD Section 4\n */\nfunction initializeCLI(): Command {\n  const program = new Command();\n\n  program\n    .name('cctoast-wsl')\n    .description(\n      'Secure, zero-admin utility for Windows toast notifications from WSL via Claude Code hooks'\n    )\n    .version(packageJson.version, '-v, --version', 'Display version number');\n\n  // Installation scope flags (mutually exclusive)\n  program\n    .option('-g, --global', 'Install for user to ~/.claude/... (default)')\n    .option('-l, --local', 'Install for project to .claude/...')\n    .addHelpText(\n      'after',\n      '\\nScope Options:\\n  Only one of --global or --local can be specified'\n    );\n\n  // Hook configuration flags\n  program\n    .option('--notification', 'Include Notification hook (default)', true)\n    .option('--no-notification', 'Exclude Notification hook')\n    .option('--stop', 'Include Stop hook (default)', true)\n    .option('--no-stop', 'Exclude Stop hook');\n\n  // Installation behavior flags\n  program.option(\n    '--sync',\n    'When local, modify tracked settings.json instead of settings.local.json (not recommended for teams due to Windows-only nature of hooks)',\n    false\n  );\n\n  // Output and behavior flags\n  program\n    .option('-p, --print-instructions', 'Show usage instructions and exit')\n    .option('--json', 'Machine-readable JSON output', false)\n    .option('-n, --dry-run', 'Preview changes without writing files')\n    .option(\n      '-f, --force',\n      'Bypass failed dependency checks (except BurntToast)'\n    )\n    .option('-q, --quiet', 'Suppress interactive prompts for CI environments');\n\n  // Uninstall flag\n  program.option('--uninstall', 'Remove cctoast-wsl installation');\n\n  return program;\n}\n\n/**\n * Validate mutually exclusive flags\n */\nfunction validateFlags(options: CliOptions): void {\n  // Handle default values first\n  if (!options.global && !options.local) {\n    options.global = true; // Default to global if neither specified\n  }\n\n  // Global and local are mutually exclusive (but only if both are explicitly set)\n  if (options.global && options.local) {\n    console.error('Error: --global and --local flags cannot be used together');\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // At least one hook must be enabled\n  if (!options.notification && !options.stop) {\n    console.error(\n      'Error: At least one hook (--notification or --stop) must be enabled'\n    );\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // Sync only makes sense with local install\n  if (options.sync && !options.local) {\n    console.error('Warning: --sync flag only applies to local installations');\n  }\n}\n\n/**\n * Handle print instructions flag\n */\nfunction handlePrintInstructions(): void {\n  console.log(`\ncctoast-wsl v${packageJson.version} - Usage Instructions\n\nINSTALLATION:\n  npx @claude/cctoast-wsl                    # Global install with defaults\n  npx @claude/cctoast-wsl --local           # Local project install\n  npx @claude/cctoast-wsl --dry-run         # Preview changes\n\nEXAMPLES:\n  npx @claude/cctoast-wsl --global --notification --stop\n  npx @claude/cctoast-wsl --local --sync --no-stop\n  npx @claude/cctoast-wsl --uninstall --global\n\nHOOK USAGE:\n  After installation, Claude Code will automatically trigger toast notifications:\n  - Notification hook: Shows when Claude is waiting for input\n  - Stop hook: Shows when Claude completes a task\n\nMANUAL TESTING:\n  ~/.claude/cctoast-wsl/show-toast.sh --notification-hook\n  ~/.claude/cctoast-wsl/show-toast.sh --stop-hook\n\nFor complete documentation: https://github.com/claudes-world/cctoast-wsl\n`);\n  process.exit(ExitCodes.SUCCESS);\n}\n\n/**\n * Format output based on --json flag\n */\nfunction formatOutput(data: InstallationResult, useJson: boolean): void {\n  if (useJson) {\n    console.log(JSON.stringify(data, null, 2));\n  } else {\n    // Human-readable output will be implemented in installation logic\n    console.log('Installation completed successfully');\n  }\n}\n\n/**\n * Check if we're in an interactive terminal\n */\nfunction isInteractive(): boolean {\n  return process.stdin.isTTY && process.stdout.isTTY;\n}\n\n/**\n * Handle cancellation in clack prompts\n */\nfunction handleCancel(): void {\n  p.cancel('Operation cancelled by user');\n  process.exit(ExitCodes.USER_ABORT);\n}\n\n/**\n * Interactive prompt flow: scope \u2192 hooks \u2192 sync \u2192 confirm\n */\nasync function runInteractiveMode(): Promise<CliOptions> {\n  p.intro('\uD83C\uDF5E cctoast-wsl Installation');\n\n  // Step 1: Scope selection\n  const scope = await p.select({\n    message: 'Choose installation scope:',\n    options: [\n      {\n        value: 'global',\n        label: 'Global',\n        hint: '\u2605 Recommended - Install to ~/.claude/',\n      },\n      {\n        value: 'local',\n        label: 'Local',\n        hint: 'Install to current project .claude/',\n      },\n    ],\n  });\n\n  if (p.isCancel(scope)) {\n    handleCancel();\n  }\n  const scopeValue = scope as string;\n\n  // Step 2: Hook selection\n  const hooks = await p.multiselect({\n    message: 'Select hooks to enable:',\n    options: [\n      {\n        value: 'notification',\n        label: 'Notification hook',\n        hint: 'Shows toast when Claude is waiting for input',\n      },\n      {\n        value: 'stop',\n        label: 'Stop hook',\n        hint: 'Shows toast when Claude completes a task',\n      },\n    ],\n    initialValues: ['notification', 'stop'],\n    required: true,\n  });\n\n  if (p.isCancel(hooks)) {\n    handleCancel();\n  }\n\n  // Step 3: Sync option (only for local installs)\n  let sync = false;\n  if (scopeValue === 'local') {\n    const syncResult = await p.confirm({\n      message: 'Modify tracked settings.json instead of settings.local.json?',\n      initialValue: false,\n    });\n\n    if (p.isCancel(syncResult)) {\n      handleCancel();\n    }\n    sync = syncResult as boolean;\n  }\n\n  // Step 4: Final confirmation\n  const hooksList = hooks as string[];\n  const summary = [\n    `Scope: ${scopeValue}`,\n    `Hooks: ${hooksList.join(', ')}`,\n    ...(scopeValue === 'local' ? [`Sync: ${sync ? 'yes' : 'no'}`] : []),\n  ];\n\n  p.log.info(\n    `Configuration summary:\\n${summary.map(item => `  \u2022 ${item}`).join('\\n')}`\n  );\n\n  // Add descriptive explanation based on config\n  let configExplanation = '';\n  if (scopeValue === 'global') {\n    configExplanation =\n      `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your global settings at ~/.claude/settings.json.\\n` +\n      'The cctoast-wsl tool will install the necessary scripts and configuration for Windows toast notifications, available to all WSL sessions for your user.';\n  } else if (scopeValue === 'local') {\n    if (sync) {\n      configExplanation =\n        `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your project's tracked settings at ./.claude/settings.json.\\n` +\n        'This will update the main project settings (recommended only if your team is Windows-only).';\n    } else {\n      configExplanation =\n        `\\nHooks for ${hooksList.map(h => h.charAt(0).toUpperCase() + h.slice(1)).join(' and ')} will be added to your local-only settings at ./.claude/settings.local.json.\\n` +\n        'This keeps Windows-specific configuration out of version control, ideal for cross-platform teams.';\n    }\n    configExplanation +=\n      '\\nThe cctoast-wsl tool will install the necessary scripts and configuration for toast notifications in this project.';\n  }\n  // TODO: After pre-flight checks, improve this message to be more precise, descriptive, and better formatted/worded.\n  // Consider including actual file paths, resolved hook actions, and a summary of what will happen next.\n  if (configExplanation) {\n    p.log.message(configExplanation);\n  }\n\n  const proceed = await p.confirm({\n    message: 'Proceed with installation?',\n    initialValue: true,\n  });\n\n  if (p.isCancel(proceed) || !proceed) {\n    handleCancel();\n  }\n\n  p.outro('Ready to install! \uD83C\uDF89');\n\n  return {\n    global: scopeValue === 'global',\n    local: scopeValue === 'local',\n    notification: hooksList.includes('notification'),\n    stop: hooksList.includes('stop'),\n    sync,\n    printInstructions: false,\n    json: false,\n    dryRun: false,\n    force: false,\n    quiet: false,\n    uninstall: false,\n  };\n}\n\n/**\n * Handle process signals gracefully\n */\nfunction setupSignalHandlers(): void {\n  process.on('SIGINT', () => {\n    p.cancel('\\nOperation cancelled by user');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n\n  process.on('SIGTERM', () => {\n    p.cancel('\\nOperation terminated');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n}\n\n/**\n * Run dependency checks with user-friendly output\n */\nasync function runDependencyChecks(options: CliOptions): Promise<void> {\n  const s = p.spinner();\n  s.start('Checking system dependencies...');\n  if (!options.quiet) {\n    console.log('\uD83D\uDD0D Checking system dependencies...\\n');\n  }\n\n  const checker = new DependencyChecker(options.force);\n  const results = await checker.checkAll();\n  \n  // Separate fatal and non-fatal failures\n  const fatalFailures = results.filter(r => !r.passed && r.fatal);\n  const warnings = results.filter(r => !r.passed && !r.fatal);\n  const passed = results.filter(r => r.passed);\n\n  // Display results\n  if (!options.quiet) {\n    // Show passed checks\n    passed.forEach(result => {\n      p.log.message(`${result.message}`, { symbol: color.cyan('\u2714') });\n\n    });\n\n    // Show warnings\n    warnings.forEach(result => {\n      console.log(`\u26A0\uFE0F  ${result.message}`);\n      if (result.remedy) {\n        console.log(`   \uD83D\uDCA1 ${result.remedy}`);\n      }\n    });\n  }\n\n  // Handle fatal failures\n  if (fatalFailures.length > 0) {\n    if (!options.quiet) {\n      console.log('\\n\u274C Fatal dependency checks failed:\\n');\n\n      fatalFailures.forEach(result => {\n        console.log(`   \u2022 ${result.message}`);\n        if (result.remedy) {\n          console.log(`     Fix: ${result.remedy}`);\n        }\n      });\n    }\n\n    // Special handling for BurntToast - offer auto-install\n    const burntToastFailure = fatalFailures.find(\n      r => r.name === 'burnttoast-module'\n    );\n    if (burntToastFailure && !options.quiet) {\n      const autoInstaller = new BurntToastAutoInstaller();\n\n      try {\n        console.log('\\n\uD83E\uDD16 Auto-installation available for BurntToast module');\n        const consent = await p.confirm({\n          message:\n            'Would you like to automatically install BurntToast PowerShell module?',\n          initialValue: true,\n        });\n\n        if (p.isCancel(consent)) {\n          handleCancel();\n        }\n\n        if (consent) {\n          await autoInstaller.install();\n\n          // Verify installation\n          if (await autoInstaller.verify()) {\n            console.log(\n              '\u2705 BurntToast module installed and verified successfully'\n            );\n\n            // Remove BurntToast from fatal failures\n            const remainingFailures = fatalFailures.filter(\n              r => r.name !== 'burnttoast-module'\n            );\n            if (remainingFailures.length === 0) {\n              console.log('\\n\uD83C\uDF89 All dependency checks now pass!');\n              return;\n            }\n          } else {\n            console.log('\u274C BurntToast installation verification failed');\n          }\n        }\n      } catch (error) {\n        console.log(\n          `\u274C Auto-installation failed: ${error instanceof Error ? error.message : error}`\n        );\n      }\n    }\n\n    if (\n      !options.force ||\n      fatalFailures.some(r => r.name === 'burnttoast-module')\n    ) {\n      console.log(\n        '\\n\uD83D\uDCA1 Use --force to bypass non-fatal checks, but BurntToast is required'\n      );\n      process.exit(ExitCodes.DEPENDENCY_FAILURE);\n    }\n  }\n\n  if (!options.quiet && warnings.length === 0 && fatalFailures.length === 0) {\n    console.log('\\n\uD83C\uDF89 All dependency checks passed!');\n  }\n  s.stop();\n}\n\n/**\n * Check if any CLI flags were explicitly provided (excluding defaults)\n */\nfunction hasExplicitFlags(argv: string[]): boolean {\n  const flagsToCheck = [\n    '--global',\n    '-g',\n    '--local',\n    '-l',\n    '--no-notification',\n    '--no-stop',\n    '--sync',\n    '--json',\n    '--dry-run',\n    '-n',\n    '--force',\n    '-f',\n    '--quiet',\n    '-q',\n    '--uninstall',\n  ];\n  return flagsToCheck.some(flag => argv.includes(flag));\n}\n\n/**\n * Main CLI execution function\n */\nasync function main(): Promise<void> {\n  try {\n    setupSignalHandlers();\n\n    const program = initializeCLI();\n\n    // Parse command line arguments\n    program.parse();\n    let options = program.opts() as CliOptions;\n\n    // Handle print instructions immediately\n    if (options.printInstructions) {\n      handlePrintInstructions();\n      return;\n    }\n\n    // Determine if we should use interactive mode\n    const shouldUseInteractive =\n      !options.quiet && isInteractive() && !hasExplicitFlags(process.argv);\n\n    if (shouldUseInteractive) {\n      // Use interactive mode\n      options = await runInteractiveMode();\n    } else {\n      // Use command line flags - validate them\n      validateFlags(options);\n    }\n\n    // Run dependency checks (Milestone 3)\n    if (options.json) {\n      // For JSON output, run checks silently and include in output\n      const checker = new DependencyChecker(options.force);\n      const depResults = await checker.checkAll();\n\n      const result = {\n        action: options.uninstall ? 'uninstall' : 'install',\n        scope: options.local ? 'local' : 'global',\n        hooks: {\n          notification: options.notification,\n          stop: options.stop,\n        },\n        settings: {\n          sync: options.sync,\n          dryRun: options.dryRun,\n          force: options.force,\n          quiet: options.quiet,\n        },\n        dependencies: {\n          timestamp: new Date().toISOString(),\n          results: depResults.map(r => ({\n            name: r.name,\n            passed: r.passed,\n            fatal: r.fatal,\n            message: r.message,\n            remedy: r.remedy,\n          })),\n          summary: {\n            total: depResults.length,\n            passed: depResults.filter(r => r.passed).length,\n            failed: depResults.filter(r => !r.passed).length,\n            fatal: depResults.filter(r => !r.passed && r.fatal).length,\n            warnings: depResults.filter(r => !r.passed && !r.fatal).length,\n          },\n        },\n      };\n\n      console.log(JSON.stringify(result, null, 2));\n\n      // Exit with appropriate code if dependencies failed\n      const fatalFailures = depResults.filter(r => !r.passed && r.fatal);\n      if (fatalFailures.length > 0 && !options.force) {\n        process.exit(ExitCodes.DEPENDENCY_FAILURE);\n      }\n    } else {\n      // Run dependency checks with user interaction\n      await runDependencyChecks(options);\n    }\n\n    if (options.dryRun && !options.json) {\n      console.log('\\n\uD83D\uDCCB DRY RUN MODE - No files will be modified');\n    }\n\n    // Run installation or uninstallation using the Installation Engine\n    const installer = new Installer({\n      global: options.global || !options.local,\n      local: options.local,\n      notificationHook: options.notification,\n      stopHook: options.stop,\n      sync: options.sync,\n      dryRun: options.dryRun,\n    });\n\n    try {\n      let installResult;\n      if (options.uninstall) {\n        installResult = await installer.uninstall();\n      } else {\n        installResult = await installer.install();\n      }\n\n      if (options.json) {\n        // For JSON output, include installation results\n        const jsonResult = {\n          action: options.uninstall ? 'uninstall' : 'install',\n          scope: options.local ? 'local' : 'global',\n          hooks: {\n            notification: options.notification,\n            stop: options.stop,\n          },\n          settings: {\n            sync: options.sync,\n            dryRun: options.dryRun,\n            force: options.force,\n            quiet: options.quiet,\n          },\n          installation: {\n            success: installResult.success,\n            installedTo: installResult.installedTo,\n            settingsPath: installResult.settingsPath,\n            backupPath: installResult.backupPath,\n            hooksAdded: installResult.hooksAdded,\n            message: installResult.message,\n          },\n        };\n        console.log(JSON.stringify(jsonResult, null, 2));\n      } else {\n        // Human-readable output\n        if (installResult.success) {\n          console.log(`\\n${installResult.message}`);\n          if (installResult.backupPath) {\n            console.log(`\uD83D\uDCC1 Backup created: ${installResult.backupPath}`);\n          }\n          if (installResult.hooksAdded.length > 0) {\n            console.log(`\uD83E\uDE9D Hooks added: ${installResult.hooksAdded.join(', ')}`);\n          }\n        } else {\n          console.error(`\\n\u274C ${installResult.message}`);\n          process.exit(ExitCodes.IO_ERROR);\n        }\n      }\n    } catch (error) {\n      const errorMessage = `Installation failed: ${error instanceof Error ? error.message : error}`;\n      if (options.json) {\n        console.log(JSON.stringify({ error: errorMessage }, null, 2));\n      } else {\n        console.error(`\\n\u274C ${errorMessage}`);\n      }\n      process.exit(ExitCodes.IO_ERROR);\n\n    }\n  } catch (error) {\n    console.error(\n      'Unexpected error:',\n      error instanceof Error ? error.message : error\n    );\n    process.exit(ExitCodes.IO_ERROR);\n  }\n}\n\n// Run CLI if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(ExitCodes.IO_ERROR);\n  });\n}\n\nexport { main, initializeCLI, validateFlags };\n", "/**\n * Dependency Management System\n *\n * Verifies WSL environment, PowerShell access, and BurntToast availability.\n * Implements 24-hour caching and BurntToast auto-installation.\n */\n\nimport { exec } from 'node:child_process';\nimport { promisify } from 'node:util';\nimport { readFile, writeFile, mkdir } from 'node:fs/promises';\nimport { existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { homedir } from 'node:os';\n\nconst execAsync = promisify(exec);\n\nexport interface CheckResult {\n  name: string;\n  passed: boolean;\n  fatal: boolean;\n  message?: string;\n  remedy?: string;\n  timestamp: number;\n}\n\nexport interface CacheData {\n  [checkName: string]: CheckResult;\n}\n\nexport interface BurntToastInstaller {\n  isInstalled(): Promise<boolean>;\n  promptInstall(): Promise<boolean>;\n  install(): Promise<void>;\n  verify(): Promise<boolean>;\n}\n\nexport class DependencyChecker {\n  private readonly cacheDir = join(homedir(), '.cache', 'cctoast-wsl');\n  private readonly cacheFile = join(this.cacheDir, 'checks.json');\n  private readonly cacheTimeoutMs = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor(private readonly _forceRefresh = false) {}\n\n  /**\n   * Check all dependencies with caching\n   */\n  async checkAll(): Promise<CheckResult[]> {\n    const checks = [\n      () => this.checkWSLEnvironment(),\n      () => this.checkPowerShellAccess(),\n      () => this.checkBurntToast(),\n      () => this.checkJqBinary(),\n      () => this.checkClaudeDirectory(),\n    ];\n\n    const results: CheckResult[] = [];\n\n    for (const check of checks) {\n      try {\n        const result = await this.runWithCache(check);\n        results.push(result);\n      } catch (error) {\n        // Create error result for failed checks\n        const errorResult: CheckResult = {\n          name: 'unknown',\n          passed: false,\n          fatal: true,\n          message: `Check failed: ${error instanceof Error ? error.message : error}`,\n          timestamp: Date.now(),\n        };\n        results.push(errorResult);\n      }\n    }\n\n    // Save results to cache\n    await this.saveCache(results);\n\n    return results;\n  }\n\n  /**\n   * Check WSL environment (fatal)\n   */\n  async checkWSLEnvironment(): Promise<CheckResult> {\n    const name = 'wsl-environment';\n\n    try {\n      // Check /proc/version for WSL markers\n      const procVersion = await readFile('/proc/version', 'utf8');\n      const isWSL1 = procVersion.includes('Microsoft');\n      const isWSL2 =\n        procVersion.includes('WSL2') ||\n        procVersion.includes('microsoft-standard');\n\n      if (isWSL1 || isWSL2) {\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: `Detected ${isWSL2 ? 'WSL2' : 'WSL1'} environment`,\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'Not running in WSL environment',\n          remedy: 'Run inside Windows Subsystem for Linux (WSL)',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'Unable to detect WSL environment',\n        remedy: 'Ensure you are running inside WSL',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check PowerShell.exe accessibility (fatal)\n   */\n  async checkPowerShellAccess(): Promise<CheckResult> {\n    const name = 'powershell-exe';\n\n    try {\n      // Check if powershell.exe is in PATH with timeout\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Write-Output test\"',\n        {\n          timeout: 5000,\n        }\n      );\n\n      if (stdout.trim() === 'test') {\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: 'PowerShell.exe accessible and functional',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'PowerShell.exe not responding correctly',\n          remedy:\n            'Add Windows PowerShell to PATH or check WSL interop settings',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'PowerShell.exe not accessible from PATH',\n        remedy:\n          'Add Windows PowerShell to PATH: export PATH=\"$PATH:/mnt/c/Windows/System32/WindowsPowerShell/v1.0\"',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check BurntToast module (fatal, but auto-installable)\n   */\n  async checkBurntToast(): Promise<CheckResult> {\n    const name = 'burnttoast-module';\n\n    try {\n      // Check if BurntToast module is available\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-Module -ListAvailable -Name BurntToast | Select-Object Version\"',\n        { timeout: 10000 }\n      );\n\n      if (stdout.trim() && !stdout.includes('No modules')) {\n        // Extract version if available\n        const versionMatch = stdout.match(/(\\d+\\.\\d+\\.\\d+)/);\n        const version = versionMatch ? versionMatch[1] : 'unknown';\n\n        return {\n          name,\n          passed: true,\n          fatal: true,\n          message: `BurntToast module installed (version ${version})`,\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: true,\n          message: 'BurntToast PowerShell module not installed',\n          remedy: 'Install-Module BurntToast -Scope CurrentUser -Force',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: true,\n        message: 'Unable to check BurntToast module availability',\n        remedy:\n          'Check PowerShell execution policy and install: Install-Module BurntToast -Scope CurrentUser -Force',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check PowerShell execution policy (warning only)\n   */\n  async checkExecutionPolicy(): Promise<CheckResult> {\n    const name = 'execution-policy';\n\n    try {\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-ExecutionPolicy\"',\n        { timeout: 5000 }\n      );\n\n      const policy = stdout.trim();\n      const restrictivePolicies = ['Restricted', 'AllSigned'];\n\n      if (restrictivePolicies.includes(policy)) {\n        return {\n          name,\n          passed: false,\n          fatal: false,\n          message: `PowerShell execution policy is restrictive: ${policy}`,\n          remedy: 'Set-ExecutionPolicy -Scope CurrentUser RemoteSigned',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: true,\n          fatal: false,\n          message: `PowerShell execution policy: ${policy}`,\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'Unable to check PowerShell execution policy',\n        remedy:\n          'Check PowerShell access and consider setting: Set-ExecutionPolicy -Scope CurrentUser RemoteSigned',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check jq binary availability (optional)\n   */\n  async checkJqBinary(): Promise<CheckResult> {\n    const name = 'jq-binary';\n\n    try {\n      await execAsync('command -v jq', { timeout: 2000 });\n\n      return {\n        name,\n        passed: true,\n        fatal: false,\n        message: 'jq binary available',\n        timestamp: Date.now(),\n      };\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'jq binary not found',\n        remedy:\n          'Install jq: sudo apt-get install jq (Ubuntu/Debian) or brew install jq (macOS)',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Check Claude directory exists (warning only)\n   */\n  async checkClaudeDirectory(): Promise<CheckResult> {\n    const name = 'claude-directory';\n    const globalClaudeDir = join(homedir(), '.claude');\n\n    try {\n      if (existsSync(globalClaudeDir)) {\n        return {\n          name,\n          passed: true,\n          fatal: false,\n          message: 'Claude directory exists',\n          timestamp: Date.now(),\n        };\n      } else {\n        return {\n          name,\n          passed: false,\n          fatal: false,\n          message: 'Claude directory not found',\n          remedy:\n            'Install Claude Code first, or hooks will not function until Claude is installed',\n          timestamp: Date.now(),\n        };\n      }\n    } catch {\n      return {\n        name,\n        passed: false,\n        fatal: false,\n        message: 'Unable to check Claude directory',\n        remedy: 'Ensure Claude Code is properly installed',\n        timestamp: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * Run a check function with caching support\n   */\n  private async runWithCache(\n    checkFn: () => Promise<CheckResult>\n  ): Promise<CheckResult> {\n    if (!this._forceRefresh) {\n      const cachedResult = await this.getCachedResult(checkFn.name);\n      if (cachedResult && this.isCacheValid(cachedResult)) {\n        return cachedResult;\n      }\n    }\n\n    return await checkFn();\n  }\n\n  /**\n   * Get cached result for a specific check\n   */\n  private async getCachedResult(\n    checkName: string\n  ): Promise<CheckResult | null> {\n    try {\n      if (!existsSync(this.cacheFile)) {\n        return null;\n      }\n\n      const cacheData: CacheData = JSON.parse(\n        await readFile(this.cacheFile, 'utf8')\n      );\n      return cacheData[checkName] || null;\n    } catch {\n      // Cache corrupted or unreadable - ignore and perform fresh check\n      return null;\n    }\n  }\n\n  /**\n   * Check if cached result is still valid (within 24h)\n   */\n  private isCacheValid(result: CheckResult): boolean {\n    const age = Date.now() - result.timestamp;\n    return age < this.cacheTimeoutMs;\n  }\n\n  /**\n   * Save check results to cache\n   */\n  private async saveCache(results: CheckResult[]): Promise<void> {\n    try {\n      // Ensure cache directory exists\n      await mkdir(this.cacheDir, { recursive: true });\n\n      // Load existing cache data\n      let cacheData: CacheData = {};\n      if (existsSync(this.cacheFile)) {\n        try {\n          cacheData = JSON.parse(await readFile(this.cacheFile, 'utf8'));\n        } catch {\n          // Corrupted cache, start fresh\n          cacheData = {};\n        }\n      }\n\n      // Update cache with new results\n      for (const result of results) {\n        cacheData[result.name] = result;\n      }\n\n      // Write updated cache atomically\n      const tempFile = `${this.cacheFile}.tmp`;\n      await writeFile(tempFile, JSON.stringify(cacheData, null, 2));\n\n      // Atomic rename (works on most POSIX systems)\n      await execAsync(`mv \"${tempFile}\" \"${this.cacheFile}\"`);\n    } catch (error) {\n      // Cache save failed - not critical, continue without caching\n      console.warn('Failed to save dependency check cache:', error);\n    }\n  }\n}\n\n/**\n * BurntToast Auto-Installer Implementation\n */\nexport class BurntToastAutoInstaller implements BurntToastInstaller {\n  async isInstalled(): Promise<boolean> {\n    try {\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Get-Module -ListAvailable -Name BurntToast\"',\n        { timeout: 10000 }\n      );\n      return stdout.trim().length > 0 && !stdout.includes('No modules');\n    } catch {\n      return false;\n    }\n  }\n\n  async promptInstall(): Promise<boolean> {\n    // This will be called from CLI with user prompts\n    // For now, just return true to indicate consent\n    return true;\n  }\n\n  async install(): Promise<void> {\n    try {\n      console.log('Installing BurntToast PowerShell module...');\n\n      const { stderr } = await execAsync(\n        'powershell.exe -Command \"Install-Module BurntToast -Scope CurrentUser -Force -AllowClobber\"',\n        { timeout: 60000 } // Allow up to 60 seconds for installation\n      );\n\n      if (stderr && !stderr.includes('WARNING')) {\n        throw new Error(`Installation failed: ${stderr}`);\n      }\n\n      console.log('BurntToast module installed successfully');\n    } catch (error) {\n      throw new Error(\n        `Failed to install BurntToast: ${error instanceof Error ? error.message : error}`\n      );\n    }\n  }\n\n  async verify(): Promise<boolean> {\n    try {\n      // Verify installation by attempting to import the module\n      const { stdout } = await execAsync(\n        'powershell.exe -Command \"Import-Module BurntToast -ErrorAction Stop; Write-Output success\"',\n        { timeout: 10000 }\n      );\n\n      return stdout.trim() === 'success';\n    } catch {\n      return false;\n    }\n  }\n}\n", "/**\n * JSONC Parser\n * \n * Parses JSON with Comments (JSONC) format while preserving formatting\n * and providing detailed error reporting with line/column information.\n */\n\nexport interface ParseResult<T = unknown> {\n  data: T;\n  errors: ParseError[];\n}\n\nexport interface ParseError {\n  message: string;\n  line: number;\n  column: number;\n  offset: number;\n}\n\nexport interface JsoncParseOptions {\n  allowComments?: boolean;\n  preserveFormatting?: boolean;\n  stripComments?: boolean;\n}\n\n/**\n * JSONC Parser with comment support and error recovery\n */\nexport class JsoncParser {\n  private content = '';\n  private position = 0;\n  private line = 1;\n  private column = 1;\n  private errors: ParseError[] = [];\n\n  /**\n   * Parse JSONC content with comment support\n   */\n  parse<T = unknown>(content: string, options: JsoncParseOptions = {}): ParseResult<T> {\n    const {\n      allowComments = true,\n      stripComments = true,\n    } = options;\n\n    this.content = content;\n    this.position = 0;\n    this.line = 1;\n    this.column = 1;\n    this.errors = [];\n\n    try {\n      let processedContent = content;\n      \n      if (allowComments && stripComments) {\n        processedContent = this.stripComments(content);\n      }\n\n      const data = JSON.parse(processedContent) as T;\n      return { data, errors: this.errors };\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        this.addError(this.extractJsonError(error.message));\n      } else {\n        this.addError('Unknown parsing error');\n      }\n      \n      // Try to recover with an empty object\n      return { data: {} as T, errors: this.errors };\n    }\n  }\n\n  /**\n   * Strip single-line and multi-line comments from JSONC\n   */\n  private stripComments(content: string): string {\n    let result = '';\n    let i = 0;\n    let line = 1;\n    let column = 1;\n\n    while (i < content.length) {\n      const char = content[i];\n      const nextChar = content[i + 1];\n\n      // Handle single-line comments //\n      if (char === '/' && nextChar === '/') {\n        // Skip to end of line\n        while (i < content.length && content[i] !== '\\n') {\n          i++;\n          column++;\n        }\n        // Include the newline to preserve line structure\n        if (i < content.length && content[i] === '\\n') {\n          result += '\\n';\n          i++;\n          line++;\n          column = 1;\n        }\n        continue;\n      }\n\n      // Handle multi-line comments /* */\n      if (char === '/' && nextChar === '*') {\n        const startLine = line;\n        const startColumn = column;\n        i += 2; // Skip /*\n        column += 2;\n\n        // Find closing */\n        let found = false;\n        while (i < content.length - 1) {\n          if (content[i] === '*' && content[i + 1] === '/') {\n            i += 2; // Skip */\n            column += 2;\n            found = true;\n            break;\n          }\n          if (content[i] === '\\n') {\n            result += '\\n'; // Preserve line structure\n            line++;\n            column = 1;\n          }\n          i++;\n          column++;\n        }\n\n        if (!found) {\n          this.addError(`Unterminated multi-line comment starting at line ${startLine}, column ${startColumn}`);\n        }\n        continue;\n      }\n\n      // Handle strings to avoid processing comments inside them\n      if (char === '\"') {\n        result += char;\n        i++;\n        column++;\n\n        // Continue until closing quote or end of string\n        while (i < content.length) {\n          const stringChar = content[i];\n          result += stringChar;\n          \n          if (stringChar === '\"' && content[i - 1] !== '\\\\') {\n            i++;\n            column++;\n            break;\n          }\n          \n          if (stringChar === '\\n') {\n            line++;\n            column = 1;\n          } else {\n            column++;\n          }\n          i++;\n        }\n        continue;\n      }\n\n      // Regular character\n      result += char;\n      if (char === '\\n') {\n        line++;\n        column = 1;\n      } else {\n        column++;\n      }\n      i++;\n    }\n\n    return result;\n  }\n\n  /**\n   * Extract useful error information from JSON parsing errors\n   */\n  private extractJsonError(message: string): string {\n    // Try to extract position information from common JSON error messages\n    const positionMatch = message.match(/at position (\\d+)/);\n    if (positionMatch) {\n      const position = parseInt(positionMatch[1]!, 10);\n      const { line, column } = this.getLineColumn(position);\n      return `JSON syntax error at line ${line}, column ${column}: ${message}`;\n    }\n\n    return `JSON syntax error: ${message}`;\n  }\n\n  /**\n   * Convert character position to line/column\n   */\n  private getLineColumn(position: number): { line: number; column: number } {\n    let line = 1;\n    let column = 1;\n\n    for (let i = 0; i < position && i < this.content.length; i++) {\n      if (this.content[i] === '\\n') {\n        line++;\n        column = 1;\n      } else {\n        column++;\n      }\n    }\n\n    return { line, column };\n  }\n\n  /**\n   * Add parsing error with current position\n   */\n  private addError(message: string): void {\n    this.errors.push({\n      message,\n      line: this.line,\n      column: this.column,\n      offset: this.position,\n    });\n  }\n\n  /**\n   * Validate JSONC syntax without parsing\n   */\n  static validate(content: string): ParseError[] {\n    const parser = new JsoncParser();\n    const result = parser.parse(content);\n    return result.errors;\n  }\n\n  /**\n   * Quick parse for when you just need the data and don't care about errors\n   */\n  static parseQuick<T = unknown>(content: string): T | null {\n    const parser = new JsoncParser();\n    const result = parser.parse<T>(content);\n    return result.errors.length === 0 ? result.data : null;\n  }\n}", "/**\n * JSONC Settings Merger\n *\n * Provides idempotent deep merge functionality for Claude settings files\n * with support for JSON with Comments (JSONC) format.\n */\n\nimport { JsoncParser, type ParseResult } from './jsonc-parser.js';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport os from 'os';\n\nexport interface ClaudeSettings {\n  hooks?: {\n    notification?: string[];\n    stop?: string[];\n    [key: string]: string[] | undefined;\n  };\n  [key: string]: unknown;\n}\n\nexport interface MergeOptions {\n  deduplicateArrays?: boolean;\n  preserveOrder?: boolean;\n  createBackup?: boolean;\n}\n\nexport interface MergeResult {\n  merged: ClaudeSettings;\n  changed: boolean;\n  backupPath?: string | undefined;\n}\n\n/**\n * Settings merger with JSONC support and atomic operations\n */\nexport class SettingsMerger {\n  private jsonc = new JsoncParser();\n\n  /**\n   * Parse JSONC content into ClaudeSettings\n   */\n  async parseJsonc(content: string): Promise<ClaudeSettings> {\n    const result: ParseResult<ClaudeSettings> = this.jsonc.parse<ClaudeSettings>(content);\n    \n    if (result.errors.length > 0) {\n      const errorMessages = result.errors.map(e => e.message).join('; ');\n      throw new Error(`JSONC parsing failed: ${errorMessages}`);\n    }\n    \n    return result.data;\n  }\n\n  /**\n   * Deep merge two settings objects with array deduplication\n   */\n  async merge(\n    existing: ClaudeSettings,\n    updates: Partial<ClaudeSettings>,\n    options: MergeOptions = {}\n  ): Promise<ClaudeSettings> {\n    const {\n      deduplicateArrays = true,\n      preserveOrder = true,\n    } = options;\n\n    const result = this.deepMerge(existing, updates, { deduplicateArrays, preserveOrder });\n    return result;\n  }\n\n  /**\n   * Read, merge, and write settings file atomically\n   */\n  async mergeFile(\n    filePath: string,\n    updates: Partial<ClaudeSettings>,\n    options: MergeOptions = {}\n  ): Promise<MergeResult> {\n    const { createBackup = true } = options;\n\n    // Read existing content\n    let existing: ClaudeSettings = {};\n    let originalContent = '';\n    \n    try {\n      originalContent = await fs.readFile(filePath, 'utf-8');\n      existing = await this.parseJsonc(originalContent);\n    } catch (error) {\n      if ((error as NodeJS.ErrnoException).code !== 'ENOENT') {\n        throw error;\n      }\n      // File doesn't exist, start with empty settings\n    }\n\n    // Perform merge\n    const merged = await this.merge(existing, updates, options);\n    const changed = !this.isEqual(existing, merged);\n\n    if (!changed) {\n      return { merged, changed: false };\n    }\n\n    let backupPath: string | undefined;\n\n    // Create backup if requested\n    if (createBackup && originalContent) {\n      backupPath = await this.createBackup(filePath, originalContent);\n    }\n\n    // Write merged settings atomically\n    await this.writeAtomic(filePath, merged);\n\n    return { merged, changed: true, backupPath };\n  }\n\n  /**\n   * Deep merge implementation with special handling for arrays\n   */\n  private deepMerge(\n    target: unknown,\n    source: unknown,\n    options: { deduplicateArrays: boolean; preserveOrder: boolean }\n  ): any {\n    if (source === null || source === undefined) {\n      return target;\n    }\n\n    if (target === null || target === undefined) {\n      return this.deepClone(source);\n    }\n\n    // Handle arrays specially\n    if (Array.isArray(target) && Array.isArray(source)) {\n      return this.mergeArrays(target, source, options);\n    }\n\n    // Handle objects\n    if (this.isObject(target) && this.isObject(source)) {\n      const result = this.deepClone(target) as Record<string, unknown>;\n      \n      for (const [key, value] of Object.entries(source)) {\n        result[key] = this.deepMerge(result[key], value, options);\n      }\n      \n      return result;\n    }\n\n    // For primitive values, source overwrites target\n    return this.deepClone(source);\n  }\n\n  /**\n   * Merge arrays with deduplication and order preservation\n   */\n  private mergeArrays(\n    target: unknown[],\n    source: unknown[],\n    options: { deduplicateArrays: boolean; preserveOrder: boolean }\n  ): unknown[] {\n    const result = [...target];\n    \n    for (const item of source) {\n      if (!options.deduplicateArrays || !this.arrayIncludes(result, item)) {\n        if (options.preserveOrder) {\n          result.push(item);\n        } else {\n          result.unshift(item);\n        }\n      }\n    }\n    \n    return result;\n  }\n\n  /**\n   * Check if array includes item (deep comparison)\n   */\n  private arrayIncludes(array: unknown[], item: unknown): boolean {\n    return array.some(existing => this.isEqual(existing, item));\n  }\n\n  /**\n   * Deep equality check\n   */\n  private isEqual(a: unknown, b: unknown): boolean {\n    if (a === b) return true;\n    if (a === null || b === null || a === undefined || b === undefined) return false;\n    if (typeof a !== typeof b) return false;\n\n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false;\n      return a.every((item, index) => this.isEqual(item, b[index]));\n    }\n\n    if (this.isObject(a) && this.isObject(b)) {\n      const keysA = Object.keys(a);\n      const keysB = Object.keys(b);\n      if (keysA.length !== keysB.length) return false;\n      return keysA.every(key => this.isEqual((a as any)[key], (b as any)[key]));\n    }\n\n    return false;\n  }\n\n  /**\n   * Deep clone an object\n   */\n  private deepClone(obj: unknown): unknown {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (Array.isArray(obj)) return obj.map(item => this.deepClone(item));\n    \n    const cloned: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      cloned[key] = this.deepClone(value);\n    }\n    return cloned;\n  }\n\n  /**\n   * Check if value is a plain object\n   */\n  private isObject(value: unknown): value is Record<string, unknown> {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n  }\n\n  /**\n   * Create timestamped backup of original file\n   */\n  private async createBackup(filePath: string, content: string): Promise<string> {\n    const dir = path.dirname(filePath);\n    const basename = path.basename(filePath);\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupDir = path.join(dir, 'backup');\n    const backupPath = path.join(backupDir, `${timestamp}-${basename}`);\n\n    // Ensure backup directory exists\n    await fs.mkdir(backupDir, { recursive: true });\n    \n    // Write backup\n    await fs.writeFile(backupPath, content, 'utf-8');\n    \n    return backupPath;\n  }\n\n  /**\n   * Write JSON content atomically (temp file -> fsync -> rename)\n   */\n  private async writeAtomic(filePath: string, data: ClaudeSettings): Promise<void> {\n    const dir = path.dirname(filePath);\n    const tempPath = path.join(dir, `.${path.basename(filePath)}.tmp.${Date.now()}`);\n    \n    try {\n      // Ensure directory exists\n      await fs.mkdir(dir, { recursive: true });\n      \n      // Write to temp file\n      const content = JSON.stringify(data, null, 2);\n      await fs.writeFile(tempPath, content, 'utf-8');\n      \n      // Sync to disk\n      const handle = await fs.open(tempPath, 'r+');\n      await handle.sync();\n      await handle.close();\n      \n      // Atomic rename\n      await fs.rename(tempPath, filePath);\n    } catch (error) {\n      // Clean up temp file on error\n      try {\n        await fs.unlink(tempPath);\n      } catch {\n        // Ignore cleanup errors\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Expand home directory in path\n   */\n  static expandPath(filePath: string): string {\n    if (filePath.startsWith('~')) {\n      return path.join(os.homedir(), filePath.slice(1));\n    }\n    return filePath;\n  }\n}\n", "/**\n * Installation Engine Module\n *\n * Handles copying scripts, assets, and merging Claude settings with\n * atomic operations and direct script path injection.\n */\n\nimport { SettingsMerger, type ClaudeSettings } from './settings-merger.js';\nimport { promises as fs, constants, readFileSync } from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { fileURLToPath } from 'url';\n\nexport interface InstallerConfig {\n  global: boolean;\n  local: boolean;\n  notificationHook: boolean;\n  stopHook: boolean;\n  sync: boolean;\n  dryRun: boolean;\n}\n\nexport interface InstallationResult {\n  success: boolean;\n  installedTo: string;\n  settingsPath: string;\n  backupPath?: string | undefined;\n  hooksAdded: string[];\n  message: string;\n}\n\nexport interface InstallManifest {\n  version: string;\n  installedAt: string;\n  config: InstallerConfig;\n  files: string[];\n  settingsPath: string;\n  hooksInstalled: string[];\n}\n\n/**\n * Installation engine with atomic operations and direct script paths\n */\nexport class Installer {\n  private merger = new SettingsMerger();\n  private packageVersion: string;\n\n  constructor(private config: InstallerConfig) {\n    // Read package.json for version info\n    try {\n      const __dirname = fileURLToPath(new URL('.', import.meta.url));\n      const packagePath = path.join(__dirname, '..', 'package.json');\n      const packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));\n      this.packageVersion = packageJson.version;\n    } catch (error) {\n      // Fallback version if package.json can't be read\n      this.packageVersion = '0.0.0';\n      console.warn('Warning: Could not read package.json version, using fallback');\n    }\n  }\n\n  /**\n   * Main installation method\n   */\n  async install(): Promise<InstallationResult> {\n    if (this.config.dryRun) {\n      return this.dryRunInstall();\n    }\n\n    try {\n      // Determine installation paths\n      const paths = this.getInstallationPaths();\n      \n      // Create installation directory\n      await this.createInstallationDirectory(paths.installDir);\n      \n      // Copy scripts and assets\n      const copiedFiles = await this.copyFiles(paths.installDir);\n      \n      // Set permissions\n      await this.setPermissions(paths.installDir);\n      \n      // Install hooks into settings\n      const hookResult = await this.installHooks(paths);\n      \n      // Create installation manifest\n      await this.createManifest(paths.installDir, copiedFiles, paths.settingsPath, hookResult.hooksAdded);\n      \n      return {\n        success: true,\n        installedTo: paths.installDir,\n        settingsPath: paths.settingsPath,\n        backupPath: hookResult.backupPath,\n        hooksAdded: hookResult.hooksAdded,\n        message: `Successfully installed cctoast-wsl to ${paths.installDir}`,\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        installedTo: '',\n        settingsPath: '',\n        hooksAdded: [],\n        message: `Installation failed: ${(error as Error).message}`,\n      };\n    }\n  }\n\n  /**\n   * Dry run installation to show what would be done\n   */\n  private async dryRunInstall(): Promise<InstallationResult> {\n    const paths = this.getInstallationPaths();\n    const hooks = this.generateHookCommands(paths.installDir);\n    const hooksAdded = [];\n    \n    if (this.config.notificationHook) {\n      hooksAdded.push('notification');\n    }\n    if (this.config.stopHook) {\n      hooksAdded.push('stop');\n    }\n\n    const message = [\n      'DRY RUN - No changes would be made:',\n      `Install directory: ${paths.installDir}`,\n      `Settings file: ${paths.settingsPath}`,\n      `Hooks to add: ${hooksAdded.join(', ')}`,\n      `Hook commands:`,\n      ...Object.entries(hooks).map(([key, cmd]) => `  ${key}: ${cmd}`),\n    ].join('\\n');\n\n    return {\n      success: true,\n      installedTo: paths.installDir,\n      settingsPath: paths.settingsPath,\n      hooksAdded,\n      message,\n    };\n  }\n\n  /**\n   * Determine installation paths based on config\n   */\n  private getInstallationPaths() {\n    const isGlobal = this.config.global || !this.config.local;\n    \n    if (isGlobal) {\n      const homeDir = os.homedir();\n      const installDir = path.join(homeDir, '.claude', 'cctoast-wsl');\n      const settingsPath = path.join(homeDir, '.claude', 'settings.json');\n      return { installDir, settingsPath, scope: 'global' as const };\n    } else {\n      const cwd = process.cwd();\n      const installDir = path.join(cwd, '.claude', 'cctoast-wsl');\n      const settingsPath = this.config.sync \n        ? path.join(cwd, '.claude', 'settings.json')\n        : path.join(cwd, '.claude', 'settings.local.json');\n      return { installDir, settingsPath, scope: 'local' as const };\n    }\n  }\n\n  /**\n   * Create installation directory\n   */\n  private async createInstallationDirectory(installDir: string): Promise<void> {\n    await fs.mkdir(installDir, { recursive: true });\n    \n    // Create assets subdirectory\n    await fs.mkdir(path.join(installDir, 'assets'), { recursive: true });\n  }\n\n  /**\n   * Copy scripts and assets to installation directory\n   */\n  private async copyFiles(installDir: string): Promise<string[]> {\n    const copiedFiles: string[] = [];\n    \n    // Copy show-toast.sh script\n    const scriptSource = path.join(process.cwd(), 'scripts', 'show-toast.sh');\n    const scriptDest = path.join(installDir, 'show-toast.sh');\n    await fs.copyFile(scriptSource, scriptDest);\n    copiedFiles.push('show-toast.sh');\n    \n    // Copy claude.png icon\n    const iconSource = path.join(process.cwd(), 'assets', 'claude.png');\n    const iconDest = path.join(installDir, 'assets', 'claude.png');\n    \n    try {\n      await fs.copyFile(iconSource, iconDest);\n      copiedFiles.push('assets/claude.png');\n    } catch (error) {\n      // Icon is optional, continue without it\n      console.warn('Warning: Could not copy claude.png icon');\n    }\n    \n    return copiedFiles;\n  }\n\n  /**\n   * Set proper permissions on installed files\n   */\n  private async setPermissions(installDir: string): Promise<void> {\n    const scriptPath = path.join(installDir, 'show-toast.sh');\n    \n    // Set script to be executable by user only (0o500)\n    await fs.chmod(scriptPath, 0o500);\n  }\n\n  /**\n   * Install hooks into Claude settings\n   */\n  private async installHooks(paths: { installDir: string; settingsPath: string; scope: 'global' | 'local' }) {\n    const hookCommands = this.generateHookCommands(paths.installDir);\n    const updates: Partial<ClaudeSettings> = { hooks: {} };\n    const hooksAdded: string[] = [];\n\n    if (this.config.notificationHook) {\n      updates.hooks!.notification = [hookCommands.notification];\n      hooksAdded.push('notification');\n    }\n\n    if (this.config.stopHook) {\n      updates.hooks!.stop = [hookCommands.stop];\n      hooksAdded.push('stop');\n    }\n\n    const result = await this.merger.mergeFile(paths.settingsPath, updates, {\n      deduplicateArrays: true,\n      preserveOrder: true,\n      createBackup: true,\n    });\n\n    return {\n      hooksAdded,\n      backupPath: result.backupPath,\n      changed: result.changed,\n    };\n  }\n\n  /**\n   * Generate hook commands with direct script paths\n   */\n  private generateHookCommands(installDir: string) {\n    const scriptPath = path.join(installDir, 'show-toast.sh');\n    \n    return {\n      notification: `${scriptPath} --notification-hook`,\n      stop: `${scriptPath} --stop-hook`,\n    };\n  }\n\n  /**\n   * Create installation manifest for uninstall tracking\n   */\n  private async createManifest(\n    installDir: string, \n    files: string[], \n    settingsPath: string, \n    hooksInstalled: string[]\n  ): Promise<void> {\n    const manifest: InstallManifest = {\n      version: this.packageVersion,\n      installedAt: new Date().toISOString(),\n      config: this.config,\n      files,\n      settingsPath,\n      hooksInstalled,\n    };\n\n    const manifestPath = path.join(installDir, 'install-manifest.json');\n    \n    try {\n      await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2), 'utf-8');\n    } catch (error) {\n      // Log warning but don't fail the installation\n      console.warn(`Warning: Could not create installation manifest: ${(error as Error).message}`);\n      console.warn('Installation will continue, but uninstall tracking may be affected.');\n    }\n  }\n\n  /**\n   * Uninstall cctoast-wsl\n   */\n  async uninstall(): Promise<InstallationResult> {\n    try {\n      const paths = this.getInstallationPaths();\n      \n      // Load manifest\n      const manifestPath = path.join(paths.installDir, 'install-manifest.json');\n      let manifest: InstallManifest | null = null;\n      \n      try {\n        const manifestContent = await fs.readFile(manifestPath, 'utf-8');\n        manifest = JSON.parse(manifestContent);\n      } catch {\n        // Continue without manifest\n      }\n\n      // Remove hooks from settings\n      const removedHooks = await this.removeHooks(paths, manifest);\n      \n      // Remove installation directory\n      await fs.rm(paths.installDir, { recursive: true, force: true });\n      \n      return {\n        success: true,\n        installedTo: paths.installDir,\n        settingsPath: paths.settingsPath,\n        hooksAdded: [], // Actually removed\n        message: `Successfully uninstalled cctoast-wsl from ${paths.installDir}. Removed hooks: ${removedHooks.join(', ')}`,\n      };\n      \n    } catch (error) {\n      return {\n        success: false,\n        installedTo: '',\n        settingsPath: '',\n        hooksAdded: [],\n        message: `Uninstall failed: ${(error as Error).message}`,\n      };\n    }\n  }\n\n  /**\n   * Remove hooks from Claude settings\n   */\n  private async removeHooks(\n    paths: { settingsPath: string; installDir: string }, \n    manifest: InstallManifest | null\n  ): Promise<string[]> {\n    const removedHooks: string[] = [];\n    \n    try {\n      const content = await fs.readFile(paths.settingsPath, 'utf-8');\n      const settings = await this.merger.parseJsonc(content);\n      \n      if (!settings.hooks) return removedHooks;\n      \n      const hookCommands = this.generateHookCommands(paths.installDir);\n      \n      // Remove our hook commands\n      for (const [hookType, command] of Object.entries(hookCommands)) {\n        const hooks = settings.hooks[hookType];\n        if (hooks) {\n          const filtered = hooks.filter(hook => hook !== command);\n          if (filtered.length !== hooks.length) {\n            settings.hooks[hookType] = filtered.length > 0 ? filtered : undefined;\n            removedHooks.push(hookType);\n          }\n        }\n      }\n      \n      // Write updated settings\n      await this.merger.mergeFile(paths.settingsPath, settings, {\n        createBackup: true,\n      });\n      \n    } catch (error) {\n      // Settings file might not exist, that's okay\n    }\n    \n    return removedHooks;\n  }\n\n  /**\n   * Check if cctoast-wsl is installed\n   */\n  async isInstalled(): Promise<boolean> {\n    const paths = this.getInstallationPaths();\n    \n    try {\n      await fs.access(paths.installDir, constants.F_OK);\n      await fs.access(path.join(paths.installDir, 'show-toast.sh'), constants.F_OK);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["p", "process", "readFileSync", "join", "fileURLToPath", "fs", "path", "os", "__dirname", "packagePath", "packageJson", "fileURLToPath", "join", "readFileSync", "process", "process", "color"]
}
