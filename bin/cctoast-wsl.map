{
  "version": 3,
  "sources": ["../src/cli.ts"],
  "sourcesContent": ["/**\n * cctoast-wsl CLI Entry Point\n *\n * Secure, zero-admin utility for Windows toast notifications from WSL\n * via Claude Code hooks using PowerShell BurntToast module.\n */\n\nimport { Command } from 'commander';\nimport process from 'node:process';\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { intro, outro, select, multiselect, confirm, isCancel, cancel, log } from '@clack/prompts';\n\n// Get package.json for version info\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\nconst packagePath = join(__dirname, '..', 'package.json');\nconst packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));\n\ninterface CliOptions {\n  global: boolean;\n  local: boolean;\n  notification: boolean;\n  stop: boolean;\n  sync: boolean;\n  printInstructions: boolean;\n  json: boolean;\n  dryRun: boolean;\n  force: boolean;\n  quiet: boolean;\n  uninstall: boolean;\n}\n\ninterface InstallationResult {\n  action: 'install' | 'uninstall';\n  scope: 'global' | 'local';\n  hooks: {\n    notification: boolean;\n    stop: boolean;\n  };\n  settings: {\n    sync: boolean;\n    dryRun: boolean;\n    force: boolean;\n    quiet: boolean;\n  };\n}\n\n/**\n * Exit codes per PRD specification\n */\nexport const ExitCodes = {\n  SUCCESS: 0,\n  USER_ABORT: 1,\n  DEPENDENCY_FAILURE: 2,\n  IO_ERROR: 3,\n} as const;\n\n/**\n * Initialize CLI with all flags from PRD Section 4\n */\nfunction initializeCLI(): Command {\n  const program = new Command();\n\n  program\n    .name('cctoast-wsl')\n    .description('Secure, zero-admin utility for Windows toast notifications from WSL via Claude Code hooks')\n    .version(packageJson.version, '-v, --version', 'Display version number');\n\n  // Installation scope flags (mutually exclusive)\n  program\n    .option('-g, --global', 'Install to ~/.claude/... (default)')\n    .option('-l, --local', 'Install to .claude/...')\n    .addHelpText('after', '\\nScope Options:\\n  Only one of --global or --local can be specified');\n\n  // Hook configuration flags\n  program\n    .option('--notification', 'Include Notification hook (default)', true)\n    .option('--no-notification', 'Exclude Notification hook')\n    .option('--stop', 'Include Stop hook (default)', true)\n    .option('--no-stop', 'Exclude Stop hook');\n\n  // Installation behavior flags\n  program\n    .option('--sync', 'When local, modify tracked settings.json instead of settings.local.json', false);\n\n  // Output and behavior flags\n  program\n    .option('-p, --print-instructions', 'Show usage instructions and exit')\n    .option('--json', 'Machine-readable JSON output', false)\n    .option('-n, --dry-run', 'Preview changes without writing files')\n    .option('-f, --force', 'Bypass failed dependency checks (except BurntToast)')\n    .option('-q, --quiet', 'Suppress interactive prompts for CI environments');\n\n  // Uninstall flag\n  program\n    .option('--uninstall', 'Remove cctoast-wsl installation');\n\n  return program;\n}\n\n/**\n * Validate mutually exclusive flags\n */\nfunction validateFlags(options: CliOptions): void {\n  // Handle default values first\n  if (!options.global && !options.local) {\n    options.global = true; // Default to global if neither specified\n  }\n\n  // Global and local are mutually exclusive (but only if both are explicitly set)\n  if (options.global && options.local) {\n    console.error('Error: --global and --local flags cannot be used together');\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // At least one hook must be enabled\n  if (!options.notification && !options.stop) {\n    console.error('Error: At least one hook (--notification or --stop) must be enabled');\n    process.exit(ExitCodes.USER_ABORT);\n  }\n\n  // Sync only makes sense with local install\n  if (options.sync && !options.local) {\n    console.error('Warning: --sync flag only applies to local installations');\n  }\n}\n\n/**\n * Handle print instructions flag\n */\nfunction handlePrintInstructions(): void {\n  console.log(`\ncctoast-wsl v${packageJson.version} - Usage Instructions\n\nINSTALLATION:\n  npx @claude/cctoast-wsl                    # Global install with defaults\n  npx @claude/cctoast-wsl --local           # Local project install\n  npx @claude/cctoast-wsl --dry-run         # Preview changes\n\nEXAMPLES:\n  npx @claude/cctoast-wsl --global --notification --stop\n  npx @claude/cctoast-wsl --local --sync --no-stop\n  npx @claude/cctoast-wsl --uninstall --global\n\nHOOK USAGE:\n  After installation, Claude Code will automatically trigger toast notifications:\n  - Notification hook: Shows when Claude is waiting for input\n  - Stop hook: Shows when Claude completes a task\n\nMANUAL TESTING:\n  ~/.claude/cctoast-wsl/show-toast.sh --notification-hook\n  ~/.claude/cctoast-wsl/show-toast.sh --stop-hook\n\nFor complete documentation: https://github.com/claudes-world/cctoast-wsl\n`);\n  process.exit(ExitCodes.SUCCESS);\n}\n\n/**\n * Format output based on --json flag\n */\nfunction formatOutput(data: InstallationResult, useJson: boolean): void {\n  if (useJson) {\n    console.log(JSON.stringify(data, null, 2));\n  } else {\n    // Human-readable output will be implemented in installation logic\n    console.log('Installation completed successfully');\n  }\n}\n\n/**\n * Check if we're in an interactive terminal\n */\nfunction isInteractive(): boolean {\n  return process.stdin.isTTY && process.stdout.isTTY;\n}\n\n/**\n * Handle cancellation in clack prompts\n */\nfunction handleCancel(): void {\n  cancel('Operation cancelled by user');\n  process.exit(ExitCodes.USER_ABORT);\n}\n\n/**\n * Interactive prompt flow: scope \u2192 hooks \u2192 sync \u2192 confirm\n */\nasync function runInteractiveMode(): Promise<CliOptions> {\n  intro('\uD83C\uDF5E cctoast-wsl Installation');\n\n  // Step 1: Scope selection\n  const scope = await select({\n    message: 'Choose installation scope:',\n    options: [\n      {\n        value: 'global',\n        label: 'Global',\n        hint: 'Install to ~/.claude/ (recommended)',\n      },\n      {\n        value: 'local',\n        label: 'Local',\n        hint: 'Install to current project .claude/',\n      },\n    ],\n  });\n\n  if (isCancel(scope)) {handleCancel();}\n  const scopeValue = scope as string;\n\n  // Step 2: Hook selection\n  const hooks = await multiselect({\n    message: 'Select hooks to enable:',\n    options: [\n      {\n        value: 'notification',\n        label: 'Notification hook',\n        hint: 'Shows toast when Claude is waiting for input',\n      },\n      {\n        value: 'stop',\n        label: 'Stop hook', \n        hint: 'Shows toast when Claude completes a task',\n      },\n    ],\n    initialValues: ['notification', 'stop'],\n    required: true,\n  });\n\n  if (isCancel(hooks)) {handleCancel();}\n\n  // Step 3: Sync option (only for local installs)\n  let sync = false;\n  if (scopeValue === 'local') {\n    const syncResult = await confirm({\n      message: 'Modify tracked settings.json instead of settings.local.json?',\n      initialValue: false,\n    });\n\n    if (isCancel(syncResult)) {handleCancel();}\n    sync = syncResult as boolean;\n  }\n\n  // Step 4: Final confirmation\n  const hooksList = hooks as string[];\n  const summary = [\n    `Scope: ${scopeValue}`,\n    `Hooks: ${hooksList.join(', ')}`,\n    ...(scopeValue === 'local' ? [`Sync: ${sync ? 'yes' : 'no'}`] : []),\n  ];\n\n  log.info(`Configuration summary:\\n${summary.map(item => `  \u2022 ${item}`).join('\\n')}`);\n\n  const proceed = await confirm({\n    message: 'Proceed with installation?',\n    initialValue: true,\n  });\n\n  if (isCancel(proceed) || !proceed) {handleCancel();}\n\n  outro('Ready to install! \uD83C\uDF89');\n\n  return {\n    global: scopeValue === 'global',\n    local: scopeValue === 'local', \n    notification: hooksList.includes('notification'),\n    stop: hooksList.includes('stop'),\n    sync,\n    printInstructions: false,\n    json: false,\n    dryRun: false,\n    force: false,\n    quiet: false,\n    uninstall: false,\n  };\n}\n\n/**\n * Handle process signals gracefully\n */\nfunction setupSignalHandlers(): void {\n  process.on('SIGINT', () => {\n    cancel('\\nOperation cancelled by user');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n\n  process.on('SIGTERM', () => {\n    cancel('\\nOperation terminated');\n    process.exit(ExitCodes.USER_ABORT);\n  });\n}\n\n/**\n * Check if any CLI flags were explicitly provided (excluding defaults)\n */\nfunction hasExplicitFlags(argv: string[]): boolean {\n  const flagsToCheck = [\n    '--global', '-g', '--local', '-l', \n    '--no-notification', '--no-stop',\n    '--sync', '--json', '--dry-run', '-n',\n    '--force', '-f', '--quiet', '-q', '--uninstall'\n  ];\n  return flagsToCheck.some(flag => argv.includes(flag));\n}\n\n/**\n * Main CLI execution function\n */\nasync function main(): Promise<void> {\n  try {\n    setupSignalHandlers();\n    \n    const program = initializeCLI();\n    \n    // Parse command line arguments\n    program.parse();\n    let options = program.opts() as CliOptions;\n    \n    // Handle print instructions immediately\n    if (options.printInstructions) {\n      handlePrintInstructions();\n      return;\n    }\n    \n    // Determine if we should use interactive mode\n    const shouldUseInteractive = !options.quiet && \n                                isInteractive() && \n                                !hasExplicitFlags(process.argv);\n    \n    if (shouldUseInteractive) {\n      // Use interactive mode\n      options = await runInteractiveMode();\n    } else {\n      // Use command line flags - validate them\n      validateFlags(options);\n    }\n    \n    // For now, just show the parsed options (implementation will come in later milestones)\n    const result = {\n      action: options.uninstall ? 'uninstall' : 'install',\n      scope: options.local ? 'local' : 'global',\n      hooks: {\n        notification: options.notification,\n        stop: options.stop,\n      },\n      settings: {\n        sync: options.sync,\n        dryRun: options.dryRun,\n        force: options.force,\n        quiet: options.quiet,\n      },\n    };\n    \n    if (options.dryRun) {\n      console.log('DRY RUN MODE - No files will be modified\\n');\n    }\n    \n    if (!shouldUseInteractive) {\n      formatOutput(result, options.json);\n    }\n    \n    // TODO: Implement actual installation/uninstallation logic in later milestones\n    if (!options.json && !shouldUseInteractive) {\n      console.log('\\nCLI Framework implemented successfully!');\n      console.log('Installation logic will be added in Milestone 4');\n    }\n    \n  } catch (error) {\n    console.error('Unexpected error:', error instanceof Error ? error.message : error);\n    process.exit(ExitCodes.IO_ERROR);\n  }\n}\n\n// Run CLI if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch((error) => {\n    console.error('Fatal error:', error);\n    process.exit(ExitCodes.IO_ERROR);\n  });\n}\n\nexport { main, initializeCLI, validateFlags };"],
  "mappings": "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",
  "names": []
}
