name: Release Please

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'package*.json'
      - 'tsconfig.json'
      - '__tests__/**'
      - '.github/workflows/release-please.yml'
      # Only trigger releases when actual code changes, not docs

# Prevent concurrent release PRs
concurrency:
  group: release-please
  cancel-in-progress: false

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip-ci]
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    
    permissions:
      contents: write
      pull-requests: write
      
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      
    steps:
      - name: Run Release Please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          # Repository configuration
          repo-url: ${{ github.server_url }}/${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
          # Release configuration
          release-type: node
          package-name: '@claude/cctoast-wsl'
          
          # Changelog configuration
          changelog-types: |
            [
              {"type":"feat","section":"🚀 Features","hidden":false},
              {"type":"fix","section":"🐛 Bug Fixes","hidden":false},
              {"type":"perf","section":"⚡ Performance Improvements","hidden":false},
              {"type":"refactor","section":"♻️ Code Refactoring","hidden":false},
              {"type":"docs","section":"📚 Documentation","hidden":false},
              {"type":"test","section":"🧪 Tests","hidden":false},
              {"type":"ci","section":"🔧 Continuous Integration","hidden":false},
              {"type":"build","section":"📦 Build System","hidden":false},
              {"type":"chore","section":"🔨 Miscellaneous","hidden":true},
              {"type":"style","section":"💎 Styles","hidden":true}
            ]
            
          # Pull request configuration
          pull-request-title-pattern: "chore: release ${version}"
          pull-request-header: |
            ## 🤖 Release Preparation
            
            This PR was automatically generated by [Release Please](https://github.com/googleapis/release-please-action).
            
            ### 📝 Changes Included
            
          # Versioning strategy
          versioning-strategy: default
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          
          # File configuration  
          extra-files: |
            bin/cctoast-wsl
            
      - name: Process Release Please Results
        if: steps.release.outputs.pr
        run: |
          echo "📋 Release Please created PR #${{ fromJson(steps.release.outputs.pr).number }}"
          echo "🔗 PR URL: ${{ fromJson(steps.release.outputs.pr).html_url }}"
          echo "📊 Changes ready for review"
          
      - name: Log Release Creation
        if: steps.release.outputs.release_created
        run: |
          echo "🎉 Release created: ${{ steps.release.outputs.tag_name }}"
          echo "📦 Version: ${{ steps.release.outputs.version }}"
          echo "🔖 Tag: ${{ steps.release.outputs.tag_name }}"
          
  # Automatically merge release PR if it passes all checks
  auto-merge-release:
    name: Auto-merge Release PR
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.pr
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Enable auto-merge for release PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ fromJson(needs.release-please.outputs.pr).number }}
        run: |
          echo "🔄 Enabling auto-merge for release PR #${PR_NUMBER}"
          
          # Enable auto-merge with squash strategy
          gh pr merge ${PR_NUMBER} --auto --squash
          
          # Add auto-merge comment
          gh pr comment ${PR_NUMBER} --body "🤖 **Auto-merge enabled**
          
          This release PR will be automatically merged when:
          - ✅ All required status checks pass
          - ✅ No merge conflicts exist
          - ✅ PR is up to date with base branch
          
          The merge will trigger the release workflow to publish to npm."
          
      - name: Request review from maintainers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ fromJson(needs.release-please.outputs.pr).number }}
        run: |
          # Request review from code owners or maintainers if configured
          # gh pr edit ${PR_NUMBER} --add-reviewer @mcorrig4
          echo "ℹ️  Review requested for release PR #${PR_NUMBER}"
          
  # Validate release PR meets quality standards
  validate-release:
    name: Validate Release PR
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.pr && !needs.release-please.outputs.release_created
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Checkout the release PR branch
          ref: ${{ fromJson(needs.release-please.outputs.pr).head.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate release preparation
        run: |
          echo "🔍 Validating release preparation..."
          
          # Check that version in package.json was updated
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version in package.json: $NEW_VERSION"
          
          # Verify CHANGELOG.md was updated
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi
          
          if ! head -20 CHANGELOG.md | grep -q "$NEW_VERSION"; then
            echo "❌ CHANGELOG.md doesn't contain new version $NEW_VERSION"
            exit 1
          fi
          
          echo "✅ Release preparation validated"
          
      - name: Run pre-release tests
        run: |
          echo "🧪 Running pre-release validation tests..."
          npm run typecheck
          npm run lint
          npm run test:run
          npm run build:prod
          
          echo "✅ Pre-release tests passed"
          
      - name: Check for breaking changes
        run: |
          echo "🔍 Checking for breaking changes..."
          
          # Check if this is a major version bump
          if echo "${{ needs.release-please.outputs.tag_name }}" | grep -E "v[0-9]+\.0\.0$"; then
            echo "⚠️  Major version detected - breaking changes may be present"
            echo "Ensure documentation is updated appropriately"
          else
            echo "✅ Minor/patch release - no breaking changes expected"
          fi